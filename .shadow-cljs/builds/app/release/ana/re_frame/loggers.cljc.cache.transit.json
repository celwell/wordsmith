["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___19888 = arguments.length;\nvar i__4731__auto___19889 = (0);\nwhile(true){\nif((i__4731__auto___19889 < len__4730__auto___19888)){\nargs__4736__auto__.push((arguments[i__4731__auto___19889]));\n\nvar G__19891 = (i__4731__auto___19889 + (1));\ni__4731__auto___19889 = G__19891;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__19872 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__19872) : level.call(null,G__19872));\n})(),args);\n});\n\nre_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.loggers.console.cljs$lang$applyTo = (function (seq19869){\nvar G__19871 = cljs.core.first(seq19869);\nvar seq19869__$1 = cljs.core.next(seq19869);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__19871,seq19869__$1);\n});\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^M","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$difference","^M"],"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H",["^V",["^Q",["^M","~:refer",["^S"]]]]]],"~:flags",["^ ","^Q",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1606343228864,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAAI,AAASA,AACX,AAACG,AAAsBH,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACI,AAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE;AACA,AAACC,AAAM,AAAAC,AAAA,AAAAC,AAAQxB;AAAR,AAAA,AAAAuB,AAAAA,AAACH,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMU,AAGHC;AAHH,AAIE;AACA,AAACC,AAAM3B,AAAQ4B,AAAMF;;AAEvB;;;AAAA,AAAMG;AAAN,AAAA,AAAAL,AAGGxB","names",["re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq19869","G__19871","cljs.core/first","cljs.core/next","self__4717__auto__","level","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__19872","cljs.core/deref","re-frame.loggers/set-loggers!","new-loggers","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^11","goog/math/math.js"],[1589754141274,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^O","~$goog.array","~$goog.asserts"]]],["^11","re_frame/loggers.cljc"],[1589754141524,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^N","^M"]]],["^11","goog/array/array.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C"]]],["^11","goog/debug/error.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/dom/nodetype.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/object/object.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],"~:SHADOW-TIMESTAMP",[1589754142000,1589754138000],["^11","goog/math/long.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","~$goog.reflect"]]],["^11","goog/string/internal.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/functions/functions.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/structs/map.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^11","goog/asserts/asserts.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1B","^1C","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/base.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",[]]],["^11","goog/structs/structs.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1B","~$goog.object"]]],["^11","goog/string/string.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.string.internal"]]],["^11","goog/reflect/reflect.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/string/stringbuffer.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/iter/iter.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1B","^1C","~$goog.functions","~$goog.math"]]],["^11","cljs/core.cljs"],[1589754138780,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["~$goog.math.Long","~$goog.math.Integer","^1J","^1P","^1B","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/math/integer.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","clojure/set.cljs"],[1589754138780,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^N"]]],["^11","goog/uri/utils.js"],[1589754141274,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1B","^1C","^1J"]]]]],"~:clj-info",["^ ","jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1589754137000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1562179875000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1589754137000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1589754137000,"jar:file:/Users/celwell/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1589754137000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1589754137000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1582516265000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1589754138000,"jar:file:/Users/celwell/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1589754138000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O"],"^P",["^F",["^Q"]],"^R",["^ ","^S","^M"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^2H",true,"^G","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^V",["~$quote",["^V",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^V",["^2Q","^2R"]]],"^2O",["^V",[["^2Q","~$&","^2R"]]],"~:arglists-meta",["^V",[null]]]],"^G","~$re-frame.loggers/console","^6","re_frame/loggers.cljc","^:",14,"^2S",["^ ","^2T",true,"^2U",1,"^2V",1,"^2W",[["^V",["^2Q","^2R"]]],"^2O",["^V",[["^2Q","~$&","^2R"]]],"^2X",["^V",[null]]],"^2W",[["^V",["^2Q","^2R"]]],"~:protocol-impl",null,"^2U",1,"^2X",["^V",[null]],"^8",1,"^2T",true,"~:methods",[["^ ","^2U",1,"^2T",true,"^2J","~$any"]],"^7",35,"~:ret-tag","^30","^9",35,"^2V",1,"~:fn-var",true,"^2O",["^V",[["^2Q","~$&","^2R"]]]],"~$set-loggers!",["^ ","^2N",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^2O",["^V",["^2P",["^V",[["~$new-loggers"]]]]],"^2L","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^G","~$re-frame.loggers/set-loggers!","^6","re_frame/loggers.cljc","^:",19,"^2W",["^V",[["^34"]]],"^2Z",null,"^2X",["^V",[null,null]],"^8",1,"^2T",false,"^7",41,"^31",["^F",[null,"^30"]],"^9",41,"^2V",1,"^32",true,"^2O",["^V",["^2P",["^V",[["^34"]]]]],"^2L","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^2N",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^2O",["^V",["^2P",["^V",[[]]]]],"^2L","Get the current logging functions used by re-frame."],"^G","~$re-frame.loggers/get-loggers","^6","re_frame/loggers.cljc","^:",18,"^2W",["^V",[[]]],"^2Z",null,"^2X",["^V",[null,null]],"^8",1,"^2T",false,"^7",48,"^31","^30","^9",48,"^2V",0,"^32",true,"^2O",["^V",["^2P",["^V",[[]]]]],"^2L","Get the current logging functions used by re-frame."]],"^T",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^F",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^3=","^3:","^3;","^39","^3<"]],"^Y",["^ ","^Q",["^F",[]]],"^Z",["^ "],"^[",["^O","^N","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1=",[["^3A","~:static-fns"],true,["^3A","~:elide-asserts"],true,["^3A","~:optimize-constants"],null,["^3A","^14"],null,["^3A","~:external-config"],null,["^3A","~:tooling-config"],null,["^3A","~:emit-constants"],null,["^3A","~:load-tests"],false,["^3A","~:form-size-threshold"],null,["^3A","~:infer-externs"],true,["^3A","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^3A","~:fn-invoke-direct"],null,["^3A","~:source-map"],null]]]