["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/konva/lib/filters/Kaleidoscope.js"],"~:js","shadow$provide[77]=function(n,e,t,k){Object.defineProperty(k,\"__esModule\",{value:!0});n=e(24);t=e(28);var w=e(22);e=e(23);k.Kaleidoscope=function(e){var k=e.width,n=e.height,m=Math.round(this.kaleidoscopePower()),d=Math.round(this.kaleidoscopeAngle());var b=Math.floor(d%360*k/360);if(!(1>m)){d=w.Util.createCanvasElement();d.width=k;d.height=n;d=d.getContext(\"2d\").getImageData(0,0,k,n);var h=e.data;var a=d.data;var c=e.width;var p=e.height;var r=k/2||c/2;var v=n/2||p/2;var t=Math.sqrt(r*r+v*v);var C=\nc-r;var z=p-v;var A=Math.sqrt(C*C+z*z);t=A>t?A:t;var E,G=360/c*Math.PI/180;for(E=0;E<c;E+=1){var H=Math.sin(E*G);var L=Math.cos(E*G);for(A=0;A<p;A+=1){C=Math.floor(r+t*A/p*L);z=Math.floor(v+t*A/p*H);C=4*(z*c+C);z=h[C+0];var O=h[C+1];var J=h[C+2];var aa=h[C+3];C=4*(E+A*c);a[C+0]=z;a[C+1]=O;a[C+2]=J;a[C+3]=aa}}for(c=k/Math.pow(2,m);8>=c;)c*=2,--m;t=c=Math.ceil(c);A=0;E=t;G=1;b+c>k&&(A=t,E=0,G=-1);for(a=0;a<n;a+=1)for(h=A;h!==E;h+=G)p=Math.round(h+b)%k,H=4*(k*a+p),p=d.data[H+0],r=d.data[H+1],v=d.data[H+\n2],H=d.data[H+3],L=4*(k*a+h),d.data[L+0]=p,d.data[L+1]=r,d.data[L+2]=v,d.data[L+3]=H;for(a=0;a<n;a+=1)for(t=Math.floor(c),b=0;b<m;b+=1){for(h=0;h<t+1;h+=1)H=4*(k*a+h),p=d.data[H+0],r=d.data[H+1],v=d.data[H+2],H=d.data[H+3],L=4*(k*a+2*t-h-1),d.data[L+0]=p,d.data[L+1]=r,d.data[L+2]=v,d.data[L+3]=H;t*=2}p={polarRotation:0};k=d.data;e=e.data;n=d.width;d=d.height;m=p.polarCenterX||n/2;b=p.polarCenterY||d/2;h=Math.sqrt(m*m+b*b);a=n-m;c=d-b;a=Math.sqrt(a*a+c*c);h=a>h?a:h;p=p.polarRotation||0;for(a=0;a<n;a+=\n1)for(c=0;c<d;c+=1)v=a-m,t=c-b,r=Math.sqrt(v*v+t*t)*d/h,v=(180*Math.atan2(t,v)/Math.PI+360+p)%360,v=v*n/360,v=Math.floor(v),r=Math.floor(r),r=4*(r*n+v),v=k[r+0],t=k[r+1],A=k[r+2],E=k[r+3],r=4*(c*n+a),e[r+0]=v,e[r+1]=t,e[r+2]=A,e[r+3]=E}};n.Factory.addGetterSetter(t.Node,\"kaleidoscopePower\",2,e.getNumberValidator(),n.Factory.afterSetFilter);n.Factory.addGetterSetter(t.Node,\"kaleidoscopeAngle\",0,e.getNumberValidator(),n.Factory.afterSetFilter)}","~:source","shadow$provide[77] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Factory_1 = require(\"../Factory\");\nvar Node_1 = require(\"../Node\");\nvar Util_1 = require(\"../Util\");\nvar Validators_1 = require(\"../Validators\");\nvar ToPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta;\n    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;\n    for (theta = 0; theta < tSize; theta += 1) {\n        sin = Math.sin(theta * conversion);\n        cos = Math.cos(theta * conversion);\n        for (radius = 0; radius < rSize; radius += 1) {\n            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);\n            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);\n            i = (y * xSize + x) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (theta + radius * xSize) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nvar FromPolar = function (src, dst, opt) {\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\n    x = xSize - xMid;\n    y = ySize - yMid;\n    rad = Math.sqrt(x * x + y * y);\n    rMax = rad > rMax ? rad : rMax;\n    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;\n    var x1, y1;\n    for (x = 0; x < xSize; x += 1) {\n        for (y = 0; y < ySize; y += 1) {\n            dx = x - xMid;\n            dy = y - yMid;\n            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;\n            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;\n            theta = (theta * tSize) / 360;\n            x1 = Math.floor(theta);\n            y1 = Math.floor(radius);\n            i = (y1 * xSize + x1) * 4;\n            r = srcPixels[i + 0];\n            g = srcPixels[i + 1];\n            b = srcPixels[i + 2];\n            a = srcPixels[i + 3];\n            i = (y * xSize + x) * 4;\n            dstPixels[i + 0] = r;\n            dstPixels[i + 1] = g;\n            dstPixels[i + 2] = b;\n            dstPixels[i + 3] = a;\n        }\n    }\n};\nexports.Kaleidoscope = function (imageData) {\n    var xSize = imageData.width, ySize = imageData.height;\n    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\n    var power = Math.round(this.kaleidoscopePower());\n    var angle = Math.round(this.kaleidoscopeAngle());\n    var offset = Math.floor((xSize * (angle % 360)) / 360);\n    if (power < 1) {\n        return;\n    }\n    var tempCanvas = Util_1.Util.createCanvasElement();\n    tempCanvas.width = xSize;\n    tempCanvas.height = ySize;\n    var scratchData = tempCanvas\n        .getContext('2d')\n        .getImageData(0, 0, xSize, ySize);\n    ToPolar(imageData, scratchData, {\n        polarCenterX: xSize / 2,\n        polarCenterY: ySize / 2\n    });\n    var minSectionSize = xSize / Math.pow(2, power);\n    while (minSectionSize <= 8) {\n        minSectionSize = minSectionSize * 2;\n        power -= 1;\n    }\n    minSectionSize = Math.ceil(minSectionSize);\n    var sectionSize = minSectionSize;\n    var xStart = 0, xEnd = sectionSize, xDelta = 1;\n    if (offset + minSectionSize > xSize) {\n        xStart = sectionSize;\n        xEnd = 0;\n        xDelta = -1;\n    }\n    for (y = 0; y < ySize; y += 1) {\n        for (x = xStart; x !== xEnd; x += xDelta) {\n            xoff = Math.round(x + offset) % xSize;\n            srcPos = (xSize * y + xoff) * 4;\n            r = scratchData.data[srcPos + 0];\n            g = scratchData.data[srcPos + 1];\n            b = scratchData.data[srcPos + 2];\n            a = scratchData.data[srcPos + 3];\n            dstPos = (xSize * y + x) * 4;\n            scratchData.data[dstPos + 0] = r;\n            scratchData.data[dstPos + 1] = g;\n            scratchData.data[dstPos + 2] = b;\n            scratchData.data[dstPos + 3] = a;\n        }\n    }\n    for (y = 0; y < ySize; y += 1) {\n        sectionSize = Math.floor(minSectionSize);\n        for (i = 0; i < power; i += 1) {\n            for (x = 0; x < sectionSize + 1; x += 1) {\n                srcPos = (xSize * y + x) * 4;\n                r = scratchData.data[srcPos + 0];\n                g = scratchData.data[srcPos + 1];\n                b = scratchData.data[srcPos + 2];\n                a = scratchData.data[srcPos + 3];\n                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\n                scratchData.data[dstPos + 0] = r;\n                scratchData.data[dstPos + 1] = g;\n                scratchData.data[dstPos + 2] = b;\n                scratchData.data[dstPos + 3] = a;\n            }\n            sectionSize *= 2;\n        }\n    }\n    FromPolar(scratchData, imageData, { polarRotation: 0 });\n};\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$konva$lib$Factory","~$module$node_modules$konva$lib$Validators","~$shadow.js","~$module$node_modules$konva$lib$Node","~$module$node_modules$konva$lib$Util"]],"~:properties",["^5",["width","height","__esModule","value","Kaleidoscope","polarRotation"]],"~:compiled-at",1606343224277,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$konva$lib$filters$Kaleidoscope.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/konva/lib/filters/Kaleidoscope.js\"],\n\"sourcesContent\":[\"shadow$provide[77] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar Factory_1 = require(\\\"../Factory\\\");\\nvar Node_1 = require(\\\"../Node\\\");\\nvar Util_1 = require(\\\"../Util\\\");\\nvar Validators_1 = require(\\\"../Validators\\\");\\nvar ToPolar = function (src, dst, opt) {\\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;\\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\\n    x = xSize - xMid;\\n    y = ySize - yMid;\\n    rad = Math.sqrt(x * x + y * y);\\n    rMax = rad > rMax ? rad : rMax;\\n    var rSize = ySize, tSize = xSize, radius, theta;\\n    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;\\n    for (theta = 0; theta < tSize; theta += 1) {\\n        sin = Math.sin(theta * conversion);\\n        cos = Math.cos(theta * conversion);\\n        for (radius = 0; radius < rSize; radius += 1) {\\n            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);\\n            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);\\n            i = (y * xSize + x) * 4;\\n            r = srcPixels[i + 0];\\n            g = srcPixels[i + 1];\\n            b = srcPixels[i + 2];\\n            a = srcPixels[i + 3];\\n            i = (theta + radius * xSize) * 4;\\n            dstPixels[i + 0] = r;\\n            dstPixels[i + 1] = g;\\n            dstPixels[i + 2] = b;\\n            dstPixels[i + 3] = a;\\n        }\\n    }\\n};\\nvar FromPolar = function (src, dst, opt) {\\n    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;\\n    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);\\n    x = xSize - xMid;\\n    y = ySize - yMid;\\n    rad = Math.sqrt(x * x + y * y);\\n    rMax = rad > rMax ? rad : rMax;\\n    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;\\n    var x1, y1;\\n    for (x = 0; x < xSize; x += 1) {\\n        for (y = 0; y < ySize; y += 1) {\\n            dx = x - xMid;\\n            dy = y - yMid;\\n            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;\\n            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;\\n            theta = (theta * tSize) / 360;\\n            x1 = Math.floor(theta);\\n            y1 = Math.floor(radius);\\n            i = (y1 * xSize + x1) * 4;\\n            r = srcPixels[i + 0];\\n            g = srcPixels[i + 1];\\n            b = srcPixels[i + 2];\\n            a = srcPixels[i + 3];\\n            i = (y * xSize + x) * 4;\\n            dstPixels[i + 0] = r;\\n            dstPixels[i + 1] = g;\\n            dstPixels[i + 2] = b;\\n            dstPixels[i + 3] = a;\\n        }\\n    }\\n};\\nexports.Kaleidoscope = function (imageData) {\\n    var xSize = imageData.width, ySize = imageData.height;\\n    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;\\n    var power = Math.round(this.kaleidoscopePower());\\n    var angle = Math.round(this.kaleidoscopeAngle());\\n    var offset = Math.floor((xSize * (angle % 360)) / 360);\\n    if (power < 1) {\\n        return;\\n    }\\n    var tempCanvas = Util_1.Util.createCanvasElement();\\n    tempCanvas.width = xSize;\\n    tempCanvas.height = ySize;\\n    var scratchData = tempCanvas\\n        .getContext('2d')\\n        .getImageData(0, 0, xSize, ySize);\\n    ToPolar(imageData, scratchData, {\\n        polarCenterX: xSize / 2,\\n        polarCenterY: ySize / 2\\n    });\\n    var minSectionSize = xSize / Math.pow(2, power);\\n    while (minSectionSize <= 8) {\\n        minSectionSize = minSectionSize * 2;\\n        power -= 1;\\n    }\\n    minSectionSize = Math.ceil(minSectionSize);\\n    var sectionSize = minSectionSize;\\n    var xStart = 0, xEnd = sectionSize, xDelta = 1;\\n    if (offset + minSectionSize > xSize) {\\n        xStart = sectionSize;\\n        xEnd = 0;\\n        xDelta = -1;\\n    }\\n    for (y = 0; y < ySize; y += 1) {\\n        for (x = xStart; x !== xEnd; x += xDelta) {\\n            xoff = Math.round(x + offset) % xSize;\\n            srcPos = (xSize * y + xoff) * 4;\\n            r = scratchData.data[srcPos + 0];\\n            g = scratchData.data[srcPos + 1];\\n            b = scratchData.data[srcPos + 2];\\n            a = scratchData.data[srcPos + 3];\\n            dstPos = (xSize * y + x) * 4;\\n            scratchData.data[dstPos + 0] = r;\\n            scratchData.data[dstPos + 1] = g;\\n            scratchData.data[dstPos + 2] = b;\\n            scratchData.data[dstPos + 3] = a;\\n        }\\n    }\\n    for (y = 0; y < ySize; y += 1) {\\n        sectionSize = Math.floor(minSectionSize);\\n        for (i = 0; i < power; i += 1) {\\n            for (x = 0; x < sectionSize + 1; x += 1) {\\n                srcPos = (xSize * y + x) * 4;\\n                r = scratchData.data[srcPos + 0];\\n                g = scratchData.data[srcPos + 1];\\n                b = scratchData.data[srcPos + 2];\\n                a = scratchData.data[srcPos + 3];\\n                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;\\n                scratchData.data[dstPos + 0] = r;\\n                scratchData.data[dstPos + 1] = g;\\n                scratchData.data[dstPos + 2] = b;\\n                scratchData.data[dstPos + 3] = a;\\n            }\\n            sectionSize *= 2;\\n        }\\n    }\\n    FromPolar(scratchData, imageData, { polarRotation: 0 });\\n};\\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, Validators_1.getNumberValidator(), Factory_1.Factory.afterSetFilter);\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"Factory_1\",\"Node_1\",\"Util_1\",\"Validators_1\",\"Kaleidoscope\",\"exports.Kaleidoscope\",\"imageData\",\"xSize\",\"width\",\"ySize\",\"height\",\"power\",\"Math\",\"round\",\"kaleidoscopePower\",\"angle\",\"kaleidoscopeAngle\",\"offset\",\"floor\",\"tempCanvas\",\"Util\",\"createCanvasElement\",\"scratchData\",\"getContext\",\"getImageData\",\"srcPixels\",\"data\",\"dstPixels\",\"xMid\",\"yMid\",\"rMax\",\"sqrt\",\"x\",\"y\",\"rad\",\"theta\",\"conversion\",\"PI\",\"sin\",\"cos\",\"radius\",\"i\",\"r\",\"g\",\"b\",\"a\",\"minSectionSize\",\"pow\",\"sectionSize\",\"ceil\",\"xStart\",\"xEnd\",\"xDelta\",\"xoff\",\"srcPos\",\"dstPos\",\"polarRotation\",\"opt\",\"polarCenterX\",\"polarCenterY\",\"phaseShift\",\"dx\",\"dy\",\"atan2\",\"x1\",\"y1\",\"Factory\",\"addGetterSetter\",\"Node\",\"getNumberValidator\",\"afterSetFilter\"]\n}\n"]