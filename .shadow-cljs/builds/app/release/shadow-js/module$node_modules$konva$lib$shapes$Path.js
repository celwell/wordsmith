["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/konva/lib/shapes/Path.js"],"~:js","shadow$provide[58]=function(n,e,t,k){var w=this&&this.__extends||function(){var e=function(k,m){e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var h in b)b.hasOwnProperty(h)&&(d[h]=b[h])};return e(k,m)};return function(k,m){function d(){this.constructor=k}e(k,m);k.prototype=null===m?Object.create(m):(d.prototype=m.prototype,new d)}}();Object.defineProperty(k,\"__esModule\",{value:!0});n=e(22);t=e(24);var v=e(33);e=e(21);v=function(e){function k(m){m=\ne.call(this,m)||this;m.dataArray=[];m.pathLength=0;m.dataArray=k.parsePathData(m.data());for(var d=m.pathLength=0;d<m.dataArray.length;++d)m.pathLength+=m.dataArray[d].pathLength;m.on(\"dataChange.konva\",function(){this.dataArray=k.parsePathData(this.data());for(var b=this.pathLength=0;b<this.dataArray.length;++b)this.pathLength+=this.dataArray[b].pathLength});return m}w(k,e);k.prototype._sceneFunc=function(e){var d=this.dataArray;e.beginPath();for(var b=0;b<d.length;b++){var h=d[b].points;switch(d[b].command){case \"L\":e.lineTo(h[0],\nh[1]);break;case \"M\":e.moveTo(h[0],h[1]);break;case \"C\":e.bezierCurveTo(h[0],h[1],h[2],h[3],h[4],h[5]);break;case \"Q\":e.quadraticCurveTo(h[0],h[1],h[2],h[3]);break;case \"A\":var a=h[0],c=h[1],m=h[2],k=h[3],q=h[4],n=h[5],w=h[6];h=h[7];var v=m>k?m:k,x=m>k?1:m/k;m=m>k?k/m:1;e.translate(a,c);e.rotate(w);e.scale(x,m);e.arc(0,0,v,q,q+n,1-h);e.scale(1/x,1/m);e.rotate(-w);e.translate(-a,-c);break;case \"z\":e.closePath()}}e.fillStrokeShape(this)};k.prototype.getSelfRect=function(){var e=[];this.dataArray.forEach(function(a){e=\ne.concat(a.points)});for(var d=e[0],b=e[0],h=e[1],a=e[1],c,p,k=0;k<e.length/2;k++)c=e[2*k],p=e[2*k+1],isNaN(c)||(d=Math.min(d,c),b=Math.max(b,c)),isNaN(p)||(h=Math.min(h,p),a=Math.max(a,p));return{x:Math.round(d),y:Math.round(h),width:Math.round(b-d),height:Math.round(a-h)}};k.prototype.getLength=function(){return this.pathLength};k.prototype.getPointAtLength=function(e){var d=0,b=this.dataArray.length;if(!b)return null;for(;d<b&&e>this.dataArray[d].pathLength;)e-=this.dataArray[d].pathLength,++d;\nif(d===b)return e=this.dataArray[d-1].points.slice(-2),{x:e[0],y:e[1]};if(.01>e)return e=this.dataArray[d].points.slice(0,2),{x:e[0],y:e[1]};d=this.dataArray[d];b=d.points;switch(d.command){case \"L\":return k.getPointOnLine(e,d.start.x,d.start.y,b[0],b[1]);case \"C\":return k.getPointOnCubicBezier(e/d.pathLength,d.start.x,d.start.y,b[0],b[1],b[2],b[3],b[4],b[5]);case \"Q\":return k.getPointOnQuadraticBezier(e/d.pathLength,d.start.x,d.start.y,b[0],b[1],b[2],b[3]);case \"A\":var h=b[0],a=b[1],c=b[2],m=b[3],\nr=b[4],q=b[6];r+=b[5]*e/d.pathLength;return k.getPointOnEllipticalArc(h,a,c,m,r,q)}return null};k.getLineLength=function(e,d,b,h){return Math.sqrt((b-e)*(b-e)+(h-d)*(h-d))};k.getPointOnLine=function(e,d,b,h,a,c,p){void 0===c&&(c=d);void 0===p&&(p=b);var m=(a-b)/(h-d+1E-8),k=Math.sqrt(e*e/(1+m*m));h<d&&(k*=-1);var q=m*k;if(h===d)d={x:c,y:p+q};else if((p-b)/(c-d+1E-8)===m)d={x:c+k,y:p+q};else{q=this.getLineLength(d,b,h,a);if(1E-8>q)return;k=((c-d)*(h-d)+(p-b)*(a-b))/(q*q);q=d+k*(h-d);b+=k*(a-b);c=this.getLineLength(c,\np,q,b);e=Math.sqrt(e*e-c*c);k=Math.sqrt(e*e/(1+m*m));h<d&&(k*=-1);d={x:q+k,y:b+m*k}}return d};k.getPointOnCubicBezier=function(e,d,b,h,a,c,k,r,q){return{x:r*e*e*e+3*c*e*e*(1-e)+3*h*e*(1-e)*(1-e)+d*(1-e)*(1-e)*(1-e),y:q*e*e*e+3*k*e*e*(1-e)+3*a*e*(1-e)*(1-e)+b*(1-e)*(1-e)*(1-e)}};k.getPointOnQuadraticBezier=function(e,d,b,h,a,c,k){return{x:c*e*e+2*h*e*(1-e)+d*(1-e)*(1-e),y:k*e*e+2*a*e*(1-e)+b*(1-e)*(1-e)}};k.getPointOnEllipticalArc=function(e,d,b,h,a,c){var m=Math.cos(c);c=Math.sin(c);b*=Math.cos(a);\nh*=Math.sin(a);return{x:e+(b*m-h*c),y:d+(b*c+h*m)}};k.parsePathData=function(e){if(!e)return[];var d=\"mMlLvVhHzZcCqQtTsSaA\".split(\"\");var b=e.replace(/ /g,\",\");for(e=0;e<d.length;e++)b=b.replace(new RegExp(d[e],\"g\"),\"|\"+d[e]);d=b.split(\"|\");b=[];var h=[],a=0,c=0,m=/([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi,k;for(e=1;e<d.length;e++){var q=d[e],n=q.charAt(0);q=q.slice(1);for(h.length=0;k=m.exec(q);)h.push(k[0]);k=[];q=0;for(var w=h.length;q<w;q++){var v=parseFloat(h[q]);isNaN(v)?k.push(0):\nk.push(v)}for(;0<k.length&&!isNaN(k[0]);){v=null;var x=[];q=a;w=c;var t;switch(n){case \"l\":a+=k.shift();c+=k.shift();v=\"L\";x.push(a,c);break;case \"L\":a=k.shift();c=k.shift();x.push(a,c);break;case \"m\":n=k.shift();var G=k.shift();a+=n;c+=G;v=\"M\";if(2<b.length&&\"z\"===b[b.length-1].command)for(t=b.length-2;0<=t;t--)if(\"M\"===b[t].command){a=b[t].points[0]+n;c=b[t].points[1]+G;break}x.push(a,c);n=\"l\";break;case \"M\":a=k.shift();c=k.shift();v=\"M\";x.push(a,c);n=\"L\";break;case \"h\":a+=k.shift();v=\"L\";x.push(a,\nc);break;case \"H\":a=k.shift();v=\"L\";x.push(a,c);break;case \"v\":c+=k.shift();v=\"L\";x.push(a,c);break;case \"V\":c=k.shift();v=\"L\";x.push(a,c);break;case \"C\":x.push(k.shift(),k.shift(),k.shift(),k.shift());a=k.shift();c=k.shift();x.push(a,c);break;case \"c\":x.push(a+k.shift(),c+k.shift(),a+k.shift(),c+k.shift());a+=k.shift();c+=k.shift();v=\"C\";x.push(a,c);break;case \"S\":G=a;t=c;v=b[b.length-1];\"C\"===v.command&&(G=a+(a-v.points[2]),t=c+(c-v.points[3]));x.push(G,t,k.shift(),k.shift());a=k.shift();c=k.shift();\nv=\"C\";x.push(a,c);break;case \"s\":G=a;t=c;v=b[b.length-1];\"C\"===v.command&&(G=a+(a-v.points[2]),t=c+(c-v.points[3]));x.push(G,t,a+k.shift(),c+k.shift());a+=k.shift();c+=k.shift();v=\"C\";x.push(a,c);break;case \"Q\":x.push(k.shift(),k.shift());a=k.shift();c=k.shift();x.push(a,c);break;case \"q\":x.push(a+k.shift(),c+k.shift());a+=k.shift();c+=k.shift();v=\"Q\";x.push(a,c);break;case \"T\":G=a;t=c;v=b[b.length-1];\"Q\"===v.command&&(G=a+(a-v.points[0]),t=c+(c-v.points[1]));a=k.shift();c=k.shift();v=\"Q\";x.push(G,\nt,a,c);break;case \"t\":G=a;t=c;v=b[b.length-1];\"Q\"===v.command&&(G=a+(a-v.points[0]),t=c+(c-v.points[1]));a+=k.shift();c+=k.shift();v=\"Q\";x.push(G,t,a,c);break;case \"A\":x=k.shift();G=k.shift();t=k.shift();var H=k.shift();var L=k.shift();var O=a;var J=c;a=k.shift();c=k.shift();v=\"A\";x=this.convertEndpointToCenterParameterization(O,J,a,c,H,L,x,G,t);break;case \"a\":x=k.shift(),G=k.shift(),t=k.shift(),H=k.shift(),L=k.shift(),O=a,J=c,a+=k.shift(),c+=k.shift(),v=\"A\",x=this.convertEndpointToCenterParameterization(O,\nJ,a,c,H,L,x,G,t)}b.push({command:v||n,points:x,start:{x:q,y:w},pathLength:this.calcLength(q,w,v||n,x)})}\"z\"!==n&&\"Z\"!==n||b.push({command:\"z\",points:[],start:void 0,pathLength:0})}return b};k.calcLength=function(e,d,b,h){var a;switch(b){case \"L\":return k.getLineLength(e,d,h[0],h[1]);case \"C\":b=0;var c=k.getPointOnCubicBezier(0,e,d,h[0],h[1],h[2],h[3],h[4],h[5]);for(a=.01;1>=a;a+=.01){var m=k.getPointOnCubicBezier(a,e,d,h[0],h[1],h[2],h[3],h[4],h[5]);b+=k.getLineLength(c.x,c.y,m.x,m.y);c=m}return b;\ncase \"Q\":b=0;c=k.getPointOnQuadraticBezier(0,e,d,h[0],h[1],h[2],h[3]);for(a=.01;1>=a;a+=.01)m=k.getPointOnQuadraticBezier(a,e,d,h[0],h[1],h[2],h[3]),b+=k.getLineLength(c.x,c.y,m.x,m.y),c=m;return b;case \"A\":b=0;m=h[4];a=h[5];e=h[4]+a;d=Math.PI/180;Math.abs(m-e)<d&&(d=Math.abs(m-e));c=k.getPointOnEllipticalArc(h[0],h[1],h[2],h[3],m,0);if(0>a)for(a=m-d;a>e;a-=d)m=k.getPointOnEllipticalArc(h[0],h[1],h[2],h[3],a,0),b+=k.getLineLength(c.x,c.y,m.x,m.y),c=m;else for(a=m+d;a<e;a+=d)m=k.getPointOnEllipticalArc(h[0],\nh[1],h[2],h[3],a,0),b+=k.getLineLength(c.x,c.y,m.x,m.y),c=m;m=k.getPointOnEllipticalArc(h[0],h[1],h[2],h[3],e,0);return b+=k.getLineLength(c.x,c.y,m.x,m.y)}return 0};k.convertEndpointToCenterParameterization=function(e,d,b,h,a,c,k,q,n){n*=Math.PI/180;var m=Math.cos(n)*(e-b)/2+Math.sin(n)*(d-h)/2,p=-1*Math.sin(n)*(e-b)/2+Math.cos(n)*(d-h)/2,r=m*m/(k*k)+p*p/(q*q);1<r&&(k*=Math.sqrt(r),q*=Math.sqrt(r));r=Math.sqrt((k*k*q*q-k*k*p*p-q*q*m*m)/(k*k*p*p+q*q*m*m));a===c&&(r*=-1);isNaN(r)&&(r=0);a=r*k*p/q;\nr=r*-q*m/k;e=(e+b)/2+Math.cos(n)*a-Math.sin(n)*r;d=(d+h)/2+Math.sin(n)*a+Math.cos(n)*r;var w=function(a,b){return(a[0]*b[0]+a[1]*b[1])/(Math.sqrt(a[0]*a[0]+a[1]*a[1])*Math.sqrt(b[0]*b[0]+b[1]*b[1]))},v=function(a,b){return(a[0]*b[1]<a[1]*b[0]?-1:1)*Math.acos(w(a,b))};h=v([1,0],[(m-a)/k,(p-r)/q]);b=[(m-a)/k,(p-r)/q];m=[(-1*m-a)/k,(-1*p-r)/q];p=v(b,m);-1>=w(b,m)&&(p=Math.PI);1<=w(b,m)&&(p=0);0===c&&0<p&&(p-=2*Math.PI);1===c&&0>p&&(p+=2*Math.PI);return[e,d,k,q,h,p,n,c]};return k}(v.Shape);k.Path=v;v.prototype.className=\n\"Path\";v.prototype._attrsAffectingSize=[\"data\"];e._registerNode(v);t.Factory.addGetterSetter(v,\"data\");n.Collection.mapMethods(v)}","~:source","shadow$provide[58] = function(global,require,module,exports) {\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Global_1 = require(\"../Global\");\nvar Path = (function (_super) {\n    __extends(Path, _super);\n    function Path(config) {\n        var _this = _super.call(this, config) || this;\n        _this.dataArray = [];\n        _this.pathLength = 0;\n        _this.dataArray = Path.parsePathData(_this.data());\n        _this.pathLength = 0;\n        for (var i = 0; i < _this.dataArray.length; ++i) {\n            _this.pathLength += _this.dataArray[i].pathLength;\n        }\n        _this.on('dataChange.konva', function () {\n            this.dataArray = Path.parsePathData(this.data());\n            this.pathLength = 0;\n            for (var i = 0; i < this.dataArray.length; ++i) {\n                this.pathLength += this.dataArray[i].pathLength;\n            }\n        });\n        return _this;\n    }\n    Path.prototype._sceneFunc = function (context) {\n        var ca = this.dataArray;\n        context.beginPath();\n        for (var n = 0; n < ca.length; n++) {\n            var c = ca[n].command;\n            var p = ca[n].points;\n            switch (c) {\n                case 'L':\n                    context.lineTo(p[0], p[1]);\n                    break;\n                case 'M':\n                    context.moveTo(p[0], p[1]);\n                    break;\n                case 'C':\n                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n                    break;\n                case 'Q':\n                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\n                    break;\n                case 'A':\n                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\n                    var r = rx > ry ? rx : ry;\n                    var scaleX = rx > ry ? 1 : rx / ry;\n                    var scaleY = rx > ry ? ry / rx : 1;\n                    context.translate(cx, cy);\n                    context.rotate(psi);\n                    context.scale(scaleX, scaleY);\n                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\n                    context.scale(1 / scaleX, 1 / scaleY);\n                    context.rotate(-psi);\n                    context.translate(-cx, -cy);\n                    break;\n                case 'z':\n                    context.closePath();\n                    break;\n            }\n        }\n        context.fillStrokeShape(this);\n    };\n    Path.prototype.getSelfRect = function () {\n        var points = [];\n        this.dataArray.forEach(function (data) {\n            points = points.concat(data.points);\n        });\n        var minX = points[0];\n        var maxX = points[0];\n        var minY = points[1];\n        var maxY = points[1];\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            if (!isNaN(x)) {\n                minX = Math.min(minX, x);\n                maxX = Math.max(maxX, x);\n            }\n            if (!isNaN(y)) {\n                minY = Math.min(minY, y);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        return {\n            x: Math.round(minX),\n            y: Math.round(minY),\n            width: Math.round(maxX - minX),\n            height: Math.round(maxY - minY)\n        };\n    };\n    Path.prototype.getLength = function () {\n        return this.pathLength;\n    };\n    Path.prototype.getPointAtLength = function (length) {\n        var point, i = 0, ii = this.dataArray.length;\n        if (!ii) {\n            return null;\n        }\n        while (i < ii && length > this.dataArray[i].pathLength) {\n            length -= this.dataArray[i].pathLength;\n            ++i;\n        }\n        if (i === ii) {\n            point = this.dataArray[i - 1].points.slice(-2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        if (length < 0.01) {\n            point = this.dataArray[i].points.slice(0, 2);\n            return {\n                x: point[0],\n                y: point[1]\n            };\n        }\n        var cp = this.dataArray[i];\n        var p = cp.points;\n        switch (cp.command) {\n            case 'L':\n                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\n            case 'C':\n                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\n            case 'Q':\n                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\n            case 'A':\n                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];\n                theta += (dTheta * length) / cp.pathLength;\n                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\n        }\n        return null;\n    };\n    Path.getLineLength = function (x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    };\n    Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {\n        if (fromX === undefined) {\n            fromX = P1x;\n        }\n        if (fromY === undefined) {\n            fromY = P1y;\n        }\n        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\n        var run = Math.sqrt((dist * dist) / (1 + m * m));\n        if (P2x < P1x) {\n            run *= -1;\n        }\n        var rise = m * run;\n        var pt;\n        if (P2x === P1x) {\n            pt = {\n                x: fromX,\n                y: fromY + rise\n            };\n        }\n        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\n            pt = {\n                x: fromX + run,\n                y: fromY + rise\n            };\n        }\n        else {\n            var ix, iy;\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\n            if (len < 0.00000001) {\n                return undefined;\n            }\n            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\n            u = u / (len * len);\n            ix = P1x + u * (P2x - P1x);\n            iy = P1y + u * (P2y - P1y);\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\n            run = Math.sqrt((pRun * pRun) / (1 + m * m));\n            if (P2x < P1x) {\n                run *= -1;\n            }\n            rise = m * run;\n            pt = {\n                x: ix + run,\n                y: iy + rise\n            };\n        }\n        return pt;\n    };\n    Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\n        function CB1(t) {\n            return t * t * t;\n        }\n        function CB2(t) {\n            return 3 * t * t * (1 - t);\n        }\n        function CB3(t) {\n            return 3 * t * (1 - t) * (1 - t);\n        }\n        function CB4(t) {\n            return (1 - t) * (1 - t) * (1 - t);\n        }\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {\n        function QB1(t) {\n            return t * t;\n        }\n        function QB2(t) {\n            return 2 * t * (1 - t);\n        }\n        function QB3(t) {\n            return (1 - t) * (1 - t);\n        }\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\n        var pt = {\n            x: rx * Math.cos(theta),\n            y: ry * Math.sin(theta)\n        };\n        return {\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n        };\n    };\n    Path.parsePathData = function (data) {\n        if (!data) {\n            return [];\n        }\n        var cs = data;\n        var cc = [\n            'm',\n            'M',\n            'l',\n            'L',\n            'v',\n            'V',\n            'h',\n            'H',\n            'z',\n            'Z',\n            'c',\n            'C',\n            'q',\n            'Q',\n            't',\n            'T',\n            's',\n            'S',\n            'a',\n            'A'\n        ];\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\n        for (var n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n        var arr = cs.split('|');\n        var ca = [];\n        var coords = [];\n        var cpx = 0;\n        var cpy = 0;\n        var re = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:e[-+]?\\d+)?)/gi;\n        var match;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            str = str.slice(1);\n            coords.length = 0;\n            while ((match = re.exec(str))) {\n                coords.push(match[0]);\n            }\n            var p = [];\n            for (var j = 0, jlen = coords.length; j < jlen; j++) {\n                var parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    p.push(parsed);\n                }\n                else {\n                    p.push(0);\n                }\n            }\n            while (p.length > 0) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var cmd = null;\n                var points = [];\n                var startX = cpx, startY = cpy;\n                var prevCmd, ctlPtx, ctlPty;\n                var rx, ry, psi, fa, fs, x1, y1;\n                switch (c) {\n                    case 'l':\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'm':\n                        var dx = p.shift();\n                        var dy = p.shift();\n                        cpx += dx;\n                        cpy += dy;\n                        cmd = 'M';\n                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\n                            for (var idx = ca.length - 2; idx >= 0; idx--) {\n                                if (ca[idx].command === 'M') {\n                                    cpx = ca[idx].points[0] + dx;\n                                    cpy = ca[idx].points[1] + dy;\n                                    break;\n                                }\n                            }\n                        }\n                        points.push(cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'M';\n                        points.push(cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p.shift();\n                        cmd = 'L';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'C':\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'c':\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'C') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\n                        }\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'C';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'Q':\n                        points.push(p.shift(), p.shift());\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        points.push(cpx, cpy);\n                        break;\n                    case 'q':\n                        points.push(cpx + p.shift(), cpy + p.shift());\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        prevCmd = ca[ca.length - 1];\n                        if (prevCmd.command === 'Q') {\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\n                        }\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'Q';\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx = p.shift();\n                        cpy = p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                    case 'a':\n                        rx = p.shift();\n                        ry = p.shift();\n                        psi = p.shift();\n                        fa = p.shift();\n                        fs = p.shift();\n                        x1 = cpx;\n                        y1 = cpy;\n                        cpx += p.shift();\n                        cpy += p.shift();\n                        cmd = 'A';\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\n                        break;\n                }\n                ca.push({\n                    command: cmd || c,\n                    points: points,\n                    start: {\n                        x: startX,\n                        y: startY\n                    },\n                    pathLength: this.calcLength(startX, startY, cmd || c, points)\n                });\n            }\n            if (c === 'z' || c === 'Z') {\n                ca.push({\n                    command: 'z',\n                    points: [],\n                    start: undefined,\n                    pathLength: 0\n                });\n            }\n        }\n        return ca;\n    };\n    Path.calcLength = function (x, y, cmd, points) {\n        var len, p1, p2, t;\n        var path = Path;\n        switch (cmd) {\n            case 'L':\n                return path.getLineLength(x, y, points[0], points[1]);\n            case 'C':\n                len = 0.0;\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'Q':\n                len = 0.0;\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n                for (t = 0.01; t <= 1; t += 0.01) {\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                    p1 = p2;\n                }\n                return len;\n            case 'A':\n                len = 0.0;\n                var start = points[4];\n                var dTheta = points[5];\n                var end = points[4] + dTheta;\n                var inc = Math.PI / 180.0;\n                if (Math.abs(start - end) < inc) {\n                    inc = Math.abs(start - end);\n                }\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n                if (dTheta < 0) {\n                    for (t = start - inc; t > end; t -= inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                else {\n                    for (t = start + inc; t < end; t += inc) {\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                        p1 = p2;\n                    }\n                }\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\n                return len;\n        }\n        return 0;\n    };\n    Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\n        var psi = psiDeg * (Math.PI / 180.0);\n        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;\n        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +\n            (Math.cos(psi) * (y1 - y2)) / 2.0;\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n        if (lambda > 1) {\n            rx *= Math.sqrt(lambda);\n            ry *= Math.sqrt(lambda);\n        }\n        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /\n            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\n        if (fa === fs) {\n            f *= -1;\n        }\n        if (isNaN(f)) {\n            f = 0;\n        }\n        var cxp = (f * rx * yp) / ry;\n        var cyp = (f * -ry * xp) / rx;\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\n        var vMag = function (v) {\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n        };\n        var vRatio = function (u, v) {\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n        };\n        var vAngle = function (u, v) {\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\n        };\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\n        var dTheta = vAngle(u, v);\n        if (vRatio(u, v) <= -1) {\n            dTheta = Math.PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * Math.PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * Math.PI;\n        }\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\n    };\n    return Path;\n}(Shape_1.Shape));\nexports.Path = Path;\nPath.prototype.className = 'Path';\nPath.prototype._attrsAffectingSize = ['data'];\nGlobal_1._registerNode(Path);\nFactory_1.Factory.addGetterSetter(Path, 'data');\nUtil_1.Collection.mapMethods(Path);\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$konva$lib$Factory","~$shadow.js","~$module$node_modules$konva$lib$Global","~$module$node_modules$konva$lib$Shape","~$module$node_modules$konva$lib$Util"]],"~:properties",["^5",["getPointOnEllipticalArc","width","pathLength","command","prototype","height","getPointOnCubicBezier","Path","className","getPointOnQuadraticBezier","points","getSelfRect","x","__esModule","_sceneFunc","value","getPointOnLine","start","parsePathData","length","getLength","y","convertEndpointToCenterParameterization","__proto__","getLineLength","_attrsAffectingSize","getPointAtLength","calcLength","dataArray","constructor"]],"~:compiled-at",1606343224255,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$konva$lib$shapes$Path.js\",\n\"lineCount\":17,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAE7D,IAAIC,EAAa,IAAbA,EAAqB,IAAAA,UAArBA,EAAyC,QAAS,EAAG,CACrD,IAAIC,EAAgBA,QAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAChCF,CAAA,CAAgBG,MAAAC,eAAhB,EACK,CAAEC,UAAW,EAAb,CADL,UACkCC,MADlC,EAC2C,QAAS,CAACL,CAAD,CAAIC,CAAJ,CAAO,CAAED,CAAAI,UAAA,CAAcH,CAAhB,CAD3D,EAEI,QAAS,CAACD,CAAD,CAAIC,CAAJ,CAAO,CAAE,IAAKK,IAAIA,CAAT,GAAcL,EAAd,CAAqBA,CAAAM,eAAA,CAAiBD,CAAjB,CAAJ,GAAyBN,CAAA,CAAEM,CAAF,CAAzB,CAAgCL,CAAA,CAAEK,CAAF,CAAhC,CAAnB,CACpB,OAAOP,EAAA,CAAcC,CAAd,CAAiBC,CAAjB,CAJyB,CAMpC,OAAO,SAAS,CAACD,CAAD,CAAIC,CAAJ,CAAO,CAEnBO,QAASA,EAAE,EAAG,CAAE,IAAAC,YAAA,CAAmBT,CAArB,CADdD,CAAA,CAAcC,CAAd,CAAiBC,CAAjB,CAEAD,EAAAU,UAAA,CAAoB,IAAN,GAAAT,CAAA,CAAaC,MAAAS,OAAA,CAAcV,CAAd,CAAb,EAAiCO,CAAAE,UAAA,CAAeT,CAAAS,UAAf,CAA4B,IAAIF,CAAjE,CAHK,CAP8B,CAAb,EAa5CN,OAAAU,eAAA,CAAsBf,CAAtB,CAA+B,YAA/B,CAA6C,CAAEgB,MAAO,CAAA,CAAT,CAA7C,CACIC,EAAAA,CAASnB,CAAA,CAAQ,EAAR,CACToB,EAAAA,CAAYpB,CAAA,CAAQ,EAAR,CAChB,KAAIqB,EAAUrB,CAAA,CAAQ,EAAR,CACVsB,EAAAA,CAAWtB,CAAA,CAAQ,EAAR,CACXuB,EAAAA,CAAQ,QAAS,CAACC,CAAD,CAAS,CAE1BD,QAASA,EAAI,CAACE,CAAD,CAAS,CACdC,CAAAA;AAAQF,CAAAG,KAAA,CAAY,IAAZ,CAAkBF,CAAlB,CAARC,EAAqC,IACzCA,EAAAE,UAAA,CAAkB,EAClBF,EAAAG,WAAA,CAAmB,CACnBH,EAAAE,UAAA,CAAkBL,CAAAO,cAAA,CAAmBJ,CAAAK,KAAA,EAAnB,CAElB,KAAK,IAAIC,EADTN,CAAAG,WACSG,CADU,CACnB,CAAgBA,CAAhB,CAAoBN,CAAAE,UAAAK,OAApB,CAA4C,EAAED,CAA9C,CACIN,CAAAG,WAAA,EAAoBH,CAAAE,UAAA,CAAgBI,CAAhB,CAAAH,WAExBH,EAAAQ,GAAA,CAAS,kBAAT,CAA6B,QAAS,EAAG,CACrC,IAAAN,UAAA,CAAiBL,CAAAO,cAAA,CAAmB,IAAAC,KAAA,EAAnB,CAEjB,KAAK,IAAIC,EADT,IAAAH,WACSG,CADS,CAClB,CAAgBA,CAAhB,CAAoB,IAAAJ,UAAAK,OAApB,CAA2C,EAAED,CAA7C,CACI,IAAAH,WAAA,EAAmB,IAAAD,UAAA,CAAeI,CAAf,CAAAH,WAJc,CAAzC,CAOA,OAAOH,EAhBW,CADtBvB,CAAA,CAAUoB,CAAV,CAAgBC,CAAhB,CAmBAD,EAAAR,UAAAoB,WAAA,CAA4BC,QAAS,CAACC,CAAD,CAAU,CAC3C,IAAIC,EAAK,IAAAV,UACTS,EAAAE,UAAA,EACA,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,CAAAL,OAApB,CAA+BO,CAAA,EAA/B,CAAoC,CAEhC,IAAI7B,EAAI2B,CAAA,CAAGE,CAAH,CAAAC,OACR,QAFQH,CAAA,CAAGE,CAAH,CAAAE,QAER,EACI,KAAK,GAAL,CACIL,CAAAM,OAAA,CAAehC,CAAA,CAAE,CAAF,CAAf;AAAqBA,CAAA,CAAE,CAAF,CAArB,CACA,MACJ,MAAK,GAAL,CACI0B,CAAAO,OAAA,CAAejC,CAAA,CAAE,CAAF,CAAf,CAAqBA,CAAA,CAAE,CAAF,CAArB,CACA,MACJ,MAAK,GAAL,CACI0B,CAAAQ,cAAA,CAAsBlC,CAAA,CAAE,CAAF,CAAtB,CAA4BA,CAAA,CAAE,CAAF,CAA5B,CAAkCA,CAAA,CAAE,CAAF,CAAlC,CAAwCA,CAAA,CAAE,CAAF,CAAxC,CAA8CA,CAAA,CAAE,CAAF,CAA9C,CAAoDA,CAAA,CAAE,CAAF,CAApD,CACA,MACJ,MAAK,GAAL,CACI0B,CAAAS,iBAAA,CAAyBnC,CAAA,CAAE,CAAF,CAAzB,CAA+BA,CAAA,CAAE,CAAF,CAA/B,CAAqCA,CAAA,CAAE,CAAF,CAArC,CAA2CA,CAAA,CAAE,CAAF,CAA3C,CACA,MACJ,MAAK,GAAL,CAAA,IACQoC,EAAKpC,CAAA,CAAE,CAAF,CADb,CACmBqC,EAAKrC,CAAA,CAAE,CAAF,CADxB,CAC8BsC,EAAKtC,CAAA,CAAE,CAAF,CADnC,CACyCuC,EAAKvC,CAAA,CAAE,CAAF,CAD9C,CACoDwC,EAAQxC,CAAA,CAAE,CAAF,CAD5D,CACkEyC,EAASzC,CAAA,CAAE,CAAF,CAD3E,CACiF0C,EAAM1C,CAAA,CAAE,CAAF,CAAM2C,EAAAA,CAAK3C,CAAA,CAAE,CAAF,CAC9F,KAAI4C,EAAIN,CAAA,CAAKC,CAAL,CAAUD,CAAV,CAAeC,CAAvB,CACIM,EAASP,CAAA,CAAKC,CAAL,CAAU,CAAV,CAAcD,CAAd,CAAmBC,CAC5BO,EAAAA,CAASR,CAAA,CAAKC,CAAL,CAAUA,CAAV,CAAeD,CAAf,CAAoB,CACjCZ,EAAAqB,UAAA,CAAkBX,CAAlB,CAAsBC,CAAtB,CACAX,EAAAsB,OAAA,CAAeN,CAAf,CACAhB,EAAAuB,MAAA,CAAcJ,CAAd,CAAsBC,CAAtB,CACApB,EAAAwB,IAAA,CAAY,CAAZ,CAAe,CAAf,CAAkBN,CAAlB,CAAqBJ,CAArB,CAA4BA,CAA5B,CAAoCC,CAApC,CAA4C,CAA5C,CAAgDE,CAAhD,CACAjB,EAAAuB,MAAA,CAAc,CAAd,CAAkBJ,CAAlB,CAA0B,CAA1B,CAA8BC,CAA9B,CACApB,EAAAsB,OAAA,CAAe,CAACN,CAAhB,CACAhB,EAAAqB,UAAA,CAAkB,CAACX,CAAnB,CAAuB,CAACC,CAAxB,CACA,MACJ,MAAK,GAAL,CACIX,CAAAyB,UAAA,EA3BR,CAHgC,CAkCpCzB,CAAA0B,gBAAA,CAAwB,IAAxB,CArC2C,CAuC/CxC,EAAAR,UAAAiD,YAAA,CAA6BC,QAAS,EAAG,CACrC,IAAIxB,EAAS,EACb,KAAAb,UAAAsC,QAAA,CAAuB,QAAS,CAACnC,CAAD,CAAO,CACnCU,CAAA;AAASA,CAAA0B,OAAA,CAAcpC,CAAAU,OAAd,CAD0B,CAAvC,CAQA,KALA,IAAI2B,EAAO3B,CAAA,CAAO,CAAP,CAAX,CACI4B,EAAO5B,CAAA,CAAO,CAAP,CADX,CAEI6B,EAAO7B,CAAA,CAAO,CAAP,CAFX,CAGI8B,EAAO9B,CAAA,CAAO,CAAP,CAHX,CAII+B,CAJJ,CAIOC,CAJP,CAKSzC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBS,CAAAR,OAApB,CAAoC,CAApC,CAAuCD,CAAA,EAAvC,CACIwC,CAMA,CANI/B,CAAA,CAAW,CAAX,CAAOT,CAAP,CAMJ,CALAyC,CAKA,CALIhC,CAAA,CAAW,CAAX,CAAOT,CAAP,CAAe,CAAf,CAKJ,CAJK0C,KAAA,CAAMF,CAAN,CAIL,GAHIJ,CACA,CADOO,IAAAC,IAAA,CAASR,CAAT,CAAeI,CAAf,CACP,CAAAH,CAAA,CAAOM,IAAAE,IAAA,CAASR,CAAT,CAAeG,CAAf,CAEX,EAAKE,KAAA,CAAMD,CAAN,CAAL,GACIH,CACA,CADOK,IAAAC,IAAA,CAASN,CAAT,CAAeG,CAAf,CACP,CAAAF,CAAA,CAAOI,IAAAE,IAAA,CAASN,CAAT,CAAeE,CAAf,CAFX,CAKJ,OAAO,CACHD,EAAGG,IAAAG,MAAA,CAAWV,CAAX,CADA,CAEHK,EAAGE,IAAAG,MAAA,CAAWR,CAAX,CAFA,CAGHS,MAAOJ,IAAAG,MAAA,CAAWT,CAAX,CAAkBD,CAAlB,CAHJ,CAIHY,OAAQL,IAAAG,MAAA,CAAWP,CAAX,CAAkBD,CAAlB,CAJL,CAtB8B,CA6BzC/C,EAAAR,UAAAkE,UAAA,CAA2BC,QAAS,EAAG,CACnC,MAAO,KAAArD,WAD4B,CAGvCN,EAAAR,UAAAoE,iBAAA,CAAkCC,QAAS,CAACnD,CAAD,CAAS,CAAA,IACrCD,EAAI,CADiC,CAC9BqD,EAAK,IAAAzD,UAAAK,OACvB,IAAI,CAACoD,CAAL,CACI,MAAO,KAEX,KAAA,CAAOrD,CAAP,CAAWqD,CAAX,EAAiBpD,CAAjB,CAA0B,IAAAL,UAAA,CAAeI,CAAf,CAAAH,WAA1B,CAAA,CACII,CACA,EADU,IAAAL,UAAA,CAAeI,CAAf,CAAAH,WACV,CAAA,EAAEG,CAEN;GAAIA,CAAJ,GAAUqD,CAAV,CAEI,MADAC,EACO,CADC,IAAA1D,UAAA,CAAeI,CAAf,CAAmB,CAAnB,CAAAS,OAAA8C,MAAA,CAAoC,EAApC,CACD,CAAA,CACHf,EAAGc,CAAA,CAAM,CAAN,CADA,CAEHb,EAAGa,CAAA,CAAM,CAAN,CAFA,CAKX,IAAa,GAAb,CAAIrD,CAAJ,CAEI,MADAqD,EACO,CADC,IAAA1D,UAAA,CAAeI,CAAf,CAAAS,OAAA8C,MAAA,CAA+B,CAA/B,CAAkC,CAAlC,CACD,CAAA,CACHf,EAAGc,CAAA,CAAM,CAAN,CADA,CAEHb,EAAGa,CAAA,CAAM,CAAN,CAFA,CAKPE,EAAAA,CAAK,IAAA5D,UAAA,CAAeI,CAAf,CACLrB,EAAAA,CAAI6E,CAAA/C,OACR,QAAQ+C,CAAA9C,QAAR,EACI,KAAK,GAAL,CACI,MAAOnB,EAAAkE,eAAA,CAAoBxD,CAApB,CAA4BuD,CAAAE,MAAAlB,EAA5B,CAAwCgB,CAAAE,MAAAjB,EAAxC,CAAoD9D,CAAA,CAAE,CAAF,CAApD,CAA0DA,CAAA,CAAE,CAAF,CAA1D,CACX,MAAK,GAAL,CACI,MAAOY,EAAAoE,sBAAA,CAA2B1D,CAA3B,CAAoCuD,CAAA3D,WAApC,CAAmD2D,CAAAE,MAAAlB,EAAnD,CAA+DgB,CAAAE,MAAAjB,EAA/D,CAA2E9D,CAAA,CAAE,CAAF,CAA3E,CAAiFA,CAAA,CAAE,CAAF,CAAjF,CAAuFA,CAAA,CAAE,CAAF,CAAvF,CAA6FA,CAAA,CAAE,CAAF,CAA7F,CAAmGA,CAAA,CAAE,CAAF,CAAnG,CAAyGA,CAAA,CAAE,CAAF,CAAzG,CACX,MAAK,GAAL,CACI,MAAOY,EAAAqE,0BAAA,CAA+B3D,CAA/B,CAAwCuD,CAAA3D,WAAxC,CAAuD2D,CAAAE,MAAAlB,EAAvD,CAAmEgB,CAAAE,MAAAjB,EAAnE,CAA+E9D,CAAA,CAAE,CAAF,CAA/E,CAAqFA,CAAA,CAAE,CAAF,CAArF,CAA2FA,CAAA,CAAE,CAAF,CAA3F,CAAiGA,CAAA,CAAE,CAAF,CAAjG,CACX,MAAK,GAAL,CAAA,IACQoC,EAAKpC,CAAA,CAAE,CAAF,CADb,CACmBqC,EAAKrC,CAAA,CAAE,CAAF,CADxB,CAC8BsC,EAAKtC,CAAA,CAAE,CAAF,CADnC,CACyCuC,EAAKvC,CAAA,CAAE,CAAF,CAD9C;AACoDwC,EAAQxC,CAAA,CAAE,CAAF,CAD5D,CACiF0C,EAAM1C,CAAA,CAAE,CAAF,CACnFwC,EAAA,EADuExC,CAAAyC,CAAE,CAAFA,CACvE,CAAmBnB,CAAnB,CAA6BuD,CAAA3D,WAC7B,OAAON,EAAAsE,wBAAA,CAA6B9C,CAA7B,CAAiCC,CAAjC,CAAqCC,CAArC,CAAyCC,CAAzC,CAA6CC,CAA7C,CAAoDE,CAApD,CAVf,CAYA,MAAO,KArCyC,CAuCpD9B,EAAAuE,cAAA,CAAqBC,QAAS,CAACC,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CAAiB,CAC3C,MAAOxB,KAAAyB,KAAA,EAAWF,CAAX,CAAgBF,CAAhB,GAAuBE,CAAvB,CAA4BF,CAA5B,GAAmCG,CAAnC,CAAwCF,CAAxC,GAA+CE,CAA/C,CAAoDF,CAApD,EADoC,CAG/C1E,EAAAkE,eAAA,CAAsBY,QAAS,CAACC,CAAD,CAAOC,CAAP,CAAYC,CAAZ,CAAiBC,CAAjB,CAAsBC,CAAtB,CAA2BC,CAA3B,CAAkCC,CAAlC,CAAyC,CACtDC,IAAAA,EAAd,GAAIF,CAAJ,GACIA,CADJ,CACYJ,CADZ,CAGcM,KAAAA,EAAd,GAAID,CAAJ,GACIA,CADJ,CACYJ,CADZ,CAGA,KAAIM,GAAKJ,CAALI,CAAWN,CAAXM,GAAmBL,CAAnBK,CAAyBP,CAAzBO,CAA+B,IAA/BA,CAAJ,CACIC,EAAMpC,IAAAyB,KAAA,CAAWE,CAAX,CAAkBA,CAAlB,EAA2B,CAA3B,CAA+BQ,CAA/B,CAAmCA,CAAnC,EACNL,EAAJ,CAAUF,CAAV,GACIQ,CADJ,EACY,EADZ,CAGA,KAAIC,EAAOF,CAAPE,CAAWD,CAEf,IAAIN,CAAJ,GAAYF,CAAZ,CACIU,CAAA,CAAK,CACDzC,EAAGmC,CADF,CAEDlC,EAAGmC,CAAHnC,CAAWuC,CAFV,CADT,KAMK,KAAKJ,CAAL,CAAaJ,CAAb,GAAqBG,CAArB,CAA6BJ,CAA7B,CAAmC,IAAnC,IAAmDO,CAAnD,CACDG,CAAA,CAAK,CACDzC,EAAGmC,CAAHnC,CAAWuC,CADV,CAEDtC,EAAGmC,CAAHnC,CAAWuC,CAFV,CADJ,KAMA,CAEGE,CAAAA,CAAM,IAAApB,cAAA,CAAmBS,CAAnB,CAAwBC,CAAxB,CAA6BC,CAA7B,CAAkCC,CAAlC,CACV,IAAU,IAAV,CAAIQ,CAAJ,CACI,MAGJC,EAAA,GADSR,CACT,CADiBJ,CACjB,GADyBE,CACzB,CAD+BF,CAC/B,GADuCK,CACvC,CAD+CJ,CAC/C,GADuDE,CACvD,CAD6DF,CAC7D,IAASU,CAAT,CAAeA,CAAf,CACAE,EAAA,CAAKb,CAAL,CAAWY,CAAX,EAAgBV,CAAhB,CAAsBF,CAAtB,CACKC,EAAL,EAAWW,CAAX,EAAgBT,CAAhB,CAAsBF,CAAtB,CACIa,EAAAA,CAAQ,IAAAvB,cAAA,CAAmBa,CAAnB;AAA0BC,CAA1B,CAAiCQ,CAAjC,CAAqCE,CAArC,CACRC,EAAAA,CAAO5C,IAAAyB,KAAA,CAAUE,CAAV,CAAiBA,CAAjB,CAAwBe,CAAxB,CAAgCA,CAAhC,CACXN,EAAA,CAAMpC,IAAAyB,KAAA,CAAWmB,CAAX,CAAkBA,CAAlB,EAA2B,CAA3B,CAA+BT,CAA/B,CAAmCA,CAAnC,EACFL,EAAJ,CAAUF,CAAV,GACIQ,CADJ,EACY,EADZ,CAIAE,EAAA,CAAK,CACDzC,EAAG4C,CAAH5C,CAAQuC,CADP,CAEDtC,EAAG6C,CAAH7C,CAHGqC,CAGHrC,CAHOsC,CACN,CAjBJ,CAsBL,MAAOE,EAhD6D,CAkDxE1F,EAAAoE,sBAAA,CAA6B6B,QAAS,CAACC,CAAD,CAAMlB,CAAN,CAAWC,CAAX,CAAgBC,CAAhB,CAAqBC,CAArB,CAA0BgB,CAA1B,CAA+BC,CAA/B,CAAoCC,CAApC,CAAyCC,CAAzC,CAA8C,CAehF,MAAO,CACHrD,EAHIoD,CAGJpD,CAHciD,CAGdjD,CAHciD,CAGdjD,CAHciD,CAGdjD,CAXO,CAWPA,CAHqBkD,CAGrBlD,CAH+BiD,CAG/BjD,CAH+BiD,CAG/BjD,EAXoB,CAWpBA,CAH+BiD,CAG/BjD,EARO,CAQPA,CAHsCiC,CAGtCjC,CAHgDiD,CAGhDjD,EARgB,CAQhBA,CAHgDiD,CAGhDjD,GAR0B,CAQ1BA,CAHgDiD,CAGhDjD,EAHuD+B,CAGvD/B,EALQ,CAKRA,CAHiEiD,CAGjEjD,GALkB,CAKlBA,CAHiEiD,CAGjEjD,GAL4B,CAK5BA,CAHiEiD,CAGjEjD,CADG,CAEHC,EAHIoD,CAGJpD,CAHcgD,CAGdhD,CAHcgD,CAGdhD,CAHcgD,CAGdhD,CAZO,CAYPA,CAHqBkD,CAGrBlD,CAH+BgD,CAG/BhD,CAH+BgD,CAG/BhD,EAZoB,CAYpBA,CAH+BgD,CAG/BhD,EATO,CASPA,CAHsCiC,CAGtCjC,CAHgDgD,CAGhDhD,EATgB,CAShBA,CAHgDgD,CAGhDhD,GAT0B,CAS1BA,CAHgDgD,CAGhDhD,EAHuD+B,CAGvD/B,EANQ,CAMRA,CAHiEgD,CAGjEhD,GANkB,CAMlBA,CAHiEgD,CAGjEhD,GAN4B,CAM5BA,CAHiEgD,CAGjEhD,CAFG,CAfyE,CAoBpFlD,EAAAqE,0BAAA,CAAiCkC,QAAS,CAACL,CAAD,CAAMlB,CAAN,CAAWC,CAAX,CAAgBC,CAAhB,CAAqBC,CAArB,CAA0BgB,CAA1B,CAA+BC,CAA/B,CAAoC,CAY1E,MAAO,CACHnD,EAHIkD,CAGJlD,CAHciD,CAGdjD,CAHciD,CAGdjD,CARO,CAQPA,CAHqBiC,CAGrBjC,CAH+BiD,CAG/BjD,EARgB,CAQhBA,CAH+BiD,CAG/BjD,EAHsC+B,CAGtC/B,EALQ,CAKRA,CAHgDiD,CAGhDjD,GALkB,CAKlBA,CAHgDiD,CAGhDjD,CADG,CAEHC,EAHIkD,CAGJlD,CAHcgD,CAGdhD,CAHcgD,CAGdhD,CATO,CASPA,CAHqBiC,CAGrBjC,CAH+BgD,CAG/BhD,EATgB,CAShBA,CAH+BgD,CAG/BhD,EAHsC+B,CAGtC/B,EANQ,CAMRA,CAHgDgD,CAGhDhD,GANkB,CAMlBA,CAHgDgD,CAGhDhD,CAFG,CAZmE,CAiB9ElD,EAAAsE,wBAAA,CAA+BkC,QAAS,CAAChF,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CAAiBC,CAAjB,CAAwBE,CAAxB,CAA6B,CAAA,IAC7D2E,EAASrD,IAAAsD,IAAA,CAAS5E,CAAT,CAAe6E,EAAAA,CAASvD,IAAAwD,IAAA,CAAS9E,CAAT,CAE9BJ,EAAA,EAAK0B,IAAAsD,IAAA,CAAS9E,CAAT,CACLD;CAAA,EAAKyB,IAAAwD,IAAA,CAAShF,CAAT,CAEZ,OAAO,CACHqB,EAAGzB,CAAHyB,EAASA,CAATA,CAAgBwD,CAAhBxD,CAAyBC,CAAzBD,CAAgC0D,CAAhC1D,CADG,CAEHC,EAAGzB,CAAHyB,EAASD,CAATC,CAAgByD,CAAhBzD,CAAyBA,CAAzBA,CAAgCuD,CAAhCvD,CAFG,CAN0D,CAWrElD,EAAAO,cAAA,CAAqBsG,QAAS,CAACrG,CAAD,CAAO,CACjC,GAAI,CAACA,CAAL,CACI,MAAO,EAEX,KACIsG,EAAK,sBAAA,MAAA,CAAA,EAAA,CAsBT,KAAAC,EAvBSvG,CAuBJwG,QAAA,CAAW,IAAX,CAAiC,GAAjC,CACL,KAAS/F,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoB6F,CAAApG,OAApB,CAA+BO,CAAA,EAA/B,CACI8F,CAAA,CAAKA,CAAAC,QAAA,CAAW,IAAIC,MAAJ,CAAWH,CAAA,CAAG7F,CAAH,CAAX,CAAkB,GAAlB,CAAX,CAAmC,GAAnC,CAAyC6F,CAAA,CAAG7F,CAAH,CAAzC,CAELiG,EAAAA,CAAMH,CAAAI,MAAA,CAAS,GAAT,CACNpG,EAAAA,CAAK,EACT,KAAIqG,EAAS,EAAb,CACIC,EAAM,CADV,CAEIC,EAAM,CAFV,CAGIC,EAAK,qDAHT,CAIIC,CACJ,KAAKvG,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBiG,CAAAxG,OAAhB,CAA4BO,CAAA,EAA5B,CAAiC,CAC7B,IAAIwG,EAAMP,CAAA,CAAIjG,CAAJ,CAAV,CACIyG,EAAID,CAAAE,OAAA,CAAW,CAAX,CACRF,EAAA,CAAMA,CAAAzD,MAAA,CAAU,CAAV,CAEN,KADAoD,CAAA1G,OACA,CADgB,CAChB,CAAQ8G,CAAR,CAAgBD,CAAAK,KAAA,CAAQH,CAAR,CAAhB,CAAA,CACIL,CAAAS,KAAA,CAAYL,CAAA,CAAM,CAAN,CAAZ,CAEApI,EAAAA,CAAI,EACC0I,EAAAA,CAAI,CAAb,KAAK,IAAWC,EAAOX,CAAA1G,OAAvB,CAAsCoH,CAAtC,CAA0CC,CAA1C,CAAgDD,CAAA,EAAhD,CAAqD,CACjD,IAAIE,EAASC,UAAA,CAAWb,CAAA,CAAOU,CAAP,CAAX,CACR3E,MAAA,CAAM6E,CAAN,CAAL,CAII5I,CAAAyI,KAAA,CAAO,CAAP,CAJJ;AACIzI,CAAAyI,KAAA,CAAOG,CAAP,CAH6C,CASrD,IAAA,CAAkB,CAAlB,CAAO5I,CAAAsB,OAAP,EACQ,CAAAyC,KAAA,CAAM/D,CAAA,CAAE,CAAF,CAAN,CADR,CAAA,CAAqB,CAIb8I,CAAAA,CAAM,IACV,KAAIhH,EAAS,EACTiH,EAAAA,CAASd,CAAKe,EAAAA,CAASd,CANV,KAOIe,CAErB,QAAQX,CAAR,EACI,KAAK,GAAL,CACIL,CAAA,EAAOjI,CAAAkJ,MAAA,EACPhB,EAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACID,CAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNpH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACQiB,CAAAA,CAAKnJ,CAAAkJ,MAAA,EACLE,KAAAA,EAAKpJ,CAAAkJ,MAAA,EACTjB,EAAA,EAAOkB,CACPjB,EAAA,EAAOkB,CACPN,EAAA,CAAM,GACN,IAAgB,CAAhB,CAAInH,CAAAL,OAAJ,EAAmD,GAAnD,GAAqBK,CAAA,CAAGA,CAAAL,OAAH,CAAe,CAAf,CAAAS,QAArB,CACI,IAASsH,CAAT,CAAe1H,CAAAL,OAAf,CAA2B,CAA3B,CAAqC,CAArC,EAA8B+H,CAA9B,CAAwCA,CAAA,EAAxC,CACI,GAAwB,GAAxB,GAAI1H,CAAA,CAAG0H,CAAH,CAAAtH,QAAJ,CAA6B,CACzBkG,CAAA,CAAMtG,CAAA,CAAG0H,CAAH,CAAAvH,OAAA,CAAe,CAAf,CAAN,CAA0BqH,CAC1BjB,EAAA,CAAMvG,CAAA,CAAG0H,CAAH,CAAAvH,OAAA,CAAe,CAAf,CAAN,CAA0BsH,CAC1B,MAHyB,CAOrCtH,CAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACAI,EAAA,CAAI,GACJ,MACJ,MAAK,GAAL,CACIL,CAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACAI,EAAA,CAAI,GACJ,MACJ,MAAK,GAAL,CACIL,CAAA,EAAOjI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ;AAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACID,CAAA,CAAMjI,CAAAkJ,MAAA,EACNJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIA,CAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIA,CAAA,CAAMlI,CAAAkJ,MAAA,EACNJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIpG,CAAA2G,KAAA,CAAYzI,CAAAkJ,MAAA,EAAZ,CAAuBlJ,CAAAkJ,MAAA,EAAvB,CAAkClJ,CAAAkJ,MAAA,EAAlC,CAA6ClJ,CAAAkJ,MAAA,EAA7C,CACAjB,EAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNpH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIpG,CAAA2G,KAAA,CAAYR,CAAZ,CAAkBjI,CAAAkJ,MAAA,EAAlB,CAA6BhB,CAA7B,CAAmClI,CAAAkJ,MAAA,EAAnC,CAA8CjB,CAA9C,CAAoDjI,CAAAkJ,MAAA,EAApD,CAA+DhB,CAA/D,CAAqElI,CAAAkJ,MAAA,EAArE,CACAjB,EAAA,EAAOjI,CAAAkJ,MAAA,EACPhB,EAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIoB,CAAA,CAASrB,CACTgB,EAAA,CAASf,CACTqB,EAAA,CAAU5H,CAAA,CAAGA,CAAAL,OAAH,CAAe,CAAf,CACc,IAAxB,GAAIiI,CAAAxH,QAAJ,GACIuH,CACA,CADSrB,CACT,EADgBA,CAChB,CADsBsB,CAAAzH,OAAA,CAAe,CAAf,CACtB,EAAAmH,CAAA,CAASf,CAAT,EAAgBA,CAAhB,CAAsBqB,CAAAzH,OAAA,CAAe,CAAf,CAAtB,CAFJ,CAIAA,EAAA2G,KAAA,CAAYa,CAAZ,CAAoBL,CAApB,CAA4BjJ,CAAAkJ,MAAA,EAA5B,CAAuClJ,CAAAkJ,MAAA,EAAvC,CACAjB,EAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNJ;CAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIoB,CAAA,CAASrB,CACTgB,EAAA,CAASf,CACTqB,EAAA,CAAU5H,CAAA,CAAGA,CAAAL,OAAH,CAAe,CAAf,CACc,IAAxB,GAAIiI,CAAAxH,QAAJ,GACIuH,CACA,CADSrB,CACT,EADgBA,CAChB,CADsBsB,CAAAzH,OAAA,CAAe,CAAf,CACtB,EAAAmH,CAAA,CAASf,CAAT,EAAgBA,CAAhB,CAAsBqB,CAAAzH,OAAA,CAAe,CAAf,CAAtB,CAFJ,CAIAA,EAAA2G,KAAA,CAAYa,CAAZ,CAAoBL,CAApB,CAA4BhB,CAA5B,CAAkCjI,CAAAkJ,MAAA,EAAlC,CAA6ChB,CAA7C,CAAmDlI,CAAAkJ,MAAA,EAAnD,CACAjB,EAAA,EAAOjI,CAAAkJ,MAAA,EACPhB,EAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIpG,CAAA2G,KAAA,CAAYzI,CAAAkJ,MAAA,EAAZ,CAAuBlJ,CAAAkJ,MAAA,EAAvB,CACAjB,EAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNpH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIpG,CAAA2G,KAAA,CAAYR,CAAZ,CAAkBjI,CAAAkJ,MAAA,EAAlB,CAA6BhB,CAA7B,CAAmClI,CAAAkJ,MAAA,EAAnC,CACAjB,EAAA,EAAOjI,CAAAkJ,MAAA,EACPhB,EAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYR,CAAZ,CAAiBC,CAAjB,CACA,MACJ,MAAK,GAAL,CACIoB,CAAA,CAASrB,CACTgB,EAAA,CAASf,CACTqB,EAAA,CAAU5H,CAAA,CAAGA,CAAAL,OAAH,CAAe,CAAf,CACc,IAAxB,GAAIiI,CAAAxH,QAAJ,GACIuH,CACA,CADSrB,CACT,EADgBA,CAChB,CADsBsB,CAAAzH,OAAA,CAAe,CAAf,CACtB,EAAAmH,CAAA,CAASf,CAAT,EAAgBA,CAAhB,CAAsBqB,CAAAzH,OAAA,CAAe,CAAf,CAAtB,CAFJ,CAIAmG,EAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYa,CAAZ;AAAoBL,CAApB,CAA4BhB,CAA5B,CAAiCC,CAAjC,CACA,MACJ,MAAK,GAAL,CACIoB,CAAA,CAASrB,CACTgB,EAAA,CAASf,CACTqB,EAAA,CAAU5H,CAAA,CAAGA,CAAAL,OAAH,CAAe,CAAf,CACc,IAAxB,GAAIiI,CAAAxH,QAAJ,GACIuH,CACA,CADSrB,CACT,EADgBA,CAChB,CADsBsB,CAAAzH,OAAA,CAAe,CAAf,CACtB,EAAAmH,CAAA,CAASf,CAAT,EAAgBA,CAAhB,CAAsBqB,CAAAzH,OAAA,CAAe,CAAf,CAAtB,CAFJ,CAIAmG,EAAA,EAAOjI,CAAAkJ,MAAA,EACPhB,EAAA,EAAOlI,CAAAkJ,MAAA,EACPJ,EAAA,CAAM,GACNhH,EAAA2G,KAAA,CAAYa,CAAZ,CAAoBL,CAApB,CAA4BhB,CAA5B,CAAiCC,CAAjC,CACA,MACJ,MAAK,GAAL,CACI5F,CAAA,CAAKtC,CAAAkJ,MAAA,EACL3G,EAAA,CAAKvC,CAAAkJ,MAAA,EACLxG,EAAA,CAAM1C,CAAAkJ,MAAA,EACN,KAAAM,EAAKxJ,CAAAkJ,MAAA,EACL,KAAAvG,EAAK3C,CAAAkJ,MAAA,EACL,KAAA7D,EAAK4C,CACL,KAAA3C,EAAK4C,CACLD,EAAA,CAAMjI,CAAAkJ,MAAA,EACNhB,EAAA,CAAMlI,CAAAkJ,MAAA,EACNJ,EAAA,CAAM,GACNhH,EAAA,CAAS,IAAA2H,wCAAA,CAA6CpE,CAA7C,CAAiDC,CAAjD,CAAqD2C,CAArD,CAA0DC,CAA1D,CAA+DsB,CAA/D,CAAmE7G,CAAnE,CAAuEL,CAAvE,CAA2EC,CAA3E,CAA+EG,CAA/E,CACT,MACJ,MAAK,GAAL,CACIJ,CAUA,CAVKtC,CAAAkJ,MAAA,EAUL,CATA3G,CASA,CATKvC,CAAAkJ,MAAA,EASL,CARAxG,CAQA,CARM1C,CAAAkJ,MAAA,EAQN,CAPAM,CAOA,CAPKxJ,CAAAkJ,MAAA,EAOL,CANAvG,CAMA,CANK3C,CAAAkJ,MAAA,EAML,CALA7D,CAKA,CALK4C,CAKL,CAJA3C,CAIA,CAJK4C,CAIL,CAHAD,CAGA,EAHOjI,CAAAkJ,MAAA,EAGP,CAFAhB,CAEA,EAFOlI,CAAAkJ,MAAA,EAEP,CADAJ,CACA,CADM,GACN,CAAAhH,CAAA,CAAS,IAAA2H,wCAAA,CAA6CpE,CAA7C;AAAiDC,CAAjD,CAAqD2C,CAArD,CAA0DC,CAA1D,CAA+DsB,CAA/D,CAAmE7G,CAAnE,CAAuEL,CAAvE,CAA2EC,CAA3E,CAA+EG,CAA/E,CAjKjB,CAoKAf,CAAA8G,KAAA,CAAQ,CACJ1G,QAAS+G,CAAT/G,EAAgBuG,CADZ,CAEJxG,OAAQA,CAFJ,CAGJiD,MAAO,CACHlB,EAAGkF,CADA,CAEHjF,EAAGkF,CAFA,CAHH,CAOJ9H,WAAY,IAAAwI,WAAA,CAAgBX,CAAhB,CAAwBC,CAAxB,CAAgCF,CAAhC,EAAuCR,CAAvC,CAA0CxG,CAA1C,CAPR,CAAR,CA7KiB,CAuLX,GAAV,GAAIwG,CAAJ,EAAuB,GAAvB,GAAiBA,CAAjB,EACI3G,CAAA8G,KAAA,CAAQ,CACJ1G,QAAS,GADL,CAEJD,OAAQ,EAFJ,CAGJiD,MAAOmB,IAAAA,EAHH,CAIJhF,WAAY,CAJR,CAAR,CA1MyB,CAkNjC,MAAOS,EAxP0B,CA0PrCf,EAAA8I,WAAA,CAAkBC,QAAS,CAAC9F,CAAD,CAAIC,CAAJ,CAAOgF,CAAP,CAAYhH,CAAZ,CAAoB,CAAA,IAC1B8H,CAEjB,QAAQd,CAAR,EACI,KAAK,GAAL,CACI,MAHGlI,EAGIuE,cAAA,CAAmBtB,CAAnB,CAAsBC,CAAtB,CAAyBhC,CAAA,CAAO,CAAP,CAAzB,CAAoCA,CAAA,CAAO,CAAP,CAApC,CACX,MAAK,GAAL,CACIyE,CAAA,CAAM,CACN,KAAAsD,EANGjJ,CAMEoE,sBAAA,CAA2B,CAA3B,CAA8BnB,CAA9B,CAAiCC,CAAjC,CAAoChC,CAAA,CAAO,CAAP,CAApC,CAA+CA,CAAA,CAAO,CAAP,CAA/C,CAA0DA,CAAA,CAAO,CAAP,CAA1D,CAAqEA,CAAA,CAAO,CAAP,CAArE,CAAgFA,CAAA,CAAO,CAAP,CAAhF,CAA2FA,CAAA,CAAO,CAAP,CAA3F,CACL,KAAK8H,CAAL,CAAS,GAAT,CAAoB,CAApB,EAAeA,CAAf,CAAuBA,CAAvB,EAA4B,GAA5B,CAAkC,CAC9B,IAAAE,EARDlJ,CAQMoE,sBAAA,CAA2B4E,CAA3B,CAA8B/F,CAA9B,CAAiCC,CAAjC,CAAoChC,CAAA,CAAO,CAAP,CAApC,CAA+CA,CAAA,CAAO,CAAP,CAA/C,CAA0DA,CAAA,CAAO,CAAP,CAA1D,CAAqEA,CAAA,CAAO,CAAP,CAArE,CAAgFA,CAAA,CAAO,CAAP,CAAhF,CAA2FA,CAAA,CAAO,CAAP,CAA3F,CACLyE,EAAA,EATD3F,CASQuE,cAAA,CAAmB0E,CAAAhG,EAAnB,CAAyBgG,CAAA/F,EAAzB,CAA+BgG,CAAAjG,EAA/B,CAAqCiG,CAAAhG,EAArC,CACP+F,EAAA,CAAKC,CAHyB,CAKlC,MAAOvD,EACX;KAAK,GAAL,CACIA,CAAA,CAAM,CACNsD,EAAA,CAfGjJ,CAeEqE,0BAAA,CAA+B,CAA/B,CAAkCpB,CAAlC,CAAqCC,CAArC,CAAwChC,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyEA,CAAA,CAAO,CAAP,CAAzE,CACL,KAAK8H,CAAL,CAAS,GAAT,CAAoB,CAApB,EAAeA,CAAf,CAAuBA,CAAvB,EAA4B,GAA5B,CACIE,CAEA,CAnBDlJ,CAiBMqE,0BAAA,CAA+B2E,CAA/B,CAAkC/F,CAAlC,CAAqCC,CAArC,CAAwChC,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyEA,CAAA,CAAO,CAAP,CAAzE,CAEL,CADAyE,CACA,EAnBD3F,CAkBQuE,cAAA,CAAmB0E,CAAAhG,EAAnB,CAAyBgG,CAAA/F,EAAzB,CAA+BgG,CAAAjG,EAA/B,CAAqCiG,CAAAhG,EAArC,CACP,CAAA+F,CAAA,CAAKC,CAET,OAAOvD,EACX,MAAK,GAAL,CACIA,CAAA,CAAM,CACFxB,EAAAA,CAAQjD,CAAA,CAAO,CAAP,CACRW,EAAAA,CAASX,CAAA,CAAO,CAAP,CACTiI,EAAAA,CAAMjI,CAAA,CAAO,CAAP,CAANiI,CAAkBtH,CAClBuH,EAAAA,CAAMhG,IAAAiG,GAAND,CAAgB,GAChBhG,KAAAkG,IAAA,CAASnF,CAAT,CAAiBgF,CAAjB,CAAJ,CAA4BC,CAA5B,GACIA,CADJ,CACUhG,IAAAkG,IAAA,CAASnF,CAAT,CAAiBgF,CAAjB,CADV,CAGAF,EAAA,CA/BGjJ,CA+BEsE,wBAAA,CAA6BpD,CAAA,CAAO,CAAP,CAA7B,CAAwCA,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyEiD,CAAzE,CAAgF,CAAhF,CACL,IAAa,CAAb,CAAItC,CAAJ,CACI,IAAKmH,CAAL,CAAS7E,CAAT,CAAiBiF,CAAjB,CAAsBJ,CAAtB,CAA0BG,CAA1B,CAA+BH,CAA/B,EAAoCI,CAApC,CACIF,CAEA,CApCLlJ,CAkCUsE,wBAAA,CAA6BpD,CAAA,CAAO,CAAP,CAA7B,CAAwCA,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyE8H,CAAzE,CAA4E,CAA5E,CAEL,CADArD,CACA,EApCL3F,CAmCYuE,cAAA,CAAmB0E,CAAAhG,EAAnB,CAAyBgG,CAAA/F,EAAzB,CAA+BgG,CAAAjG,EAA/B,CAAqCiG,CAAAhG,EAArC,CACP,CAAA+F,CAAA,CAAKC,CAJb,KAQI,KAAKF,CAAL,CAAS7E,CAAT,CAAiBiF,CAAjB,CAAsBJ,CAAtB,CAA0BG,CAA1B,CAA+BH,CAA/B,EAAoCI,CAApC,CACIF,CAEA,CA3CLlJ,CAyCUsE,wBAAA,CAA6BpD,CAAA,CAAO,CAAP,CAA7B;AAAwCA,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyE8H,CAAzE,CAA4E,CAA5E,CAEL,CADArD,CACA,EA3CL3F,CA0CYuE,cAAA,CAAmB0E,CAAAhG,EAAnB,CAAyBgG,CAAA/F,EAAzB,CAA+BgG,CAAAjG,EAA/B,CAAqCiG,CAAAhG,EAArC,CACP,CAAA+F,CAAA,CAAKC,CAGbA,EAAA,CA9CGlJ,CA8CEsE,wBAAA,CAA6BpD,CAAA,CAAO,CAAP,CAA7B,CAAwCA,CAAA,CAAO,CAAP,CAAxC,CAAmDA,CAAA,CAAO,CAAP,CAAnD,CAA8DA,CAAA,CAAO,CAAP,CAA9D,CAAyEiI,CAAzE,CAA8E,CAA9E,CAEL,OADAxD,EACA,EAhDG3F,CA+CIuE,cAAA,CAAmB0E,CAAAhG,EAAnB,CAAyBgG,CAAA/F,EAAzB,CAA+BgG,CAAAjG,EAA/B,CAAqCiG,CAAAhG,EAArC,CA9Cf,CAiDA,MAAO,EApDoC,CAsD/ClD,EAAA6I,wCAAA,CAA+CU,QAAS,CAAC9E,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CAAiBgE,CAAjB,CAAqB7G,CAArB,CAAyBL,CAAzB,CAA6BC,CAA7B,CAAiC6H,CAAjC,CAAyC,CACnFA,CAAN1H,EAAgBsB,IAAAiG,GAAhBvH,CAA0B,GAC9B,KAAI2H,EAAMrG,IAAAsD,IAAA,CAAS5E,CAAT,CAAN2H,EAAuBhF,CAAvBgF,CAA4B9E,CAA5B8E,EAAmC,CAAnCA,CAA0CrG,IAAAwD,IAAA,CAAS9E,CAAT,CAA1C2H,EAA2D/E,CAA3D+E,CAAgE7E,CAAhE6E,EAAuE,CAA3E,CACIC,EAAO,EAAPA,CAAWtG,IAAAwD,IAAA,CAAS9E,CAAT,CAAX4H,EAA4BjF,CAA5BiF,CAAiC/E,CAAjC+E,EAAwC,CAAxCA,CACCtG,IAAAsD,IAAA,CAAS5E,CAAT,CADD4H,EACkBhF,CADlBgF,CACuB9E,CADvB8E,EAC8B,CAFlC,CAGIC,EAAUF,CAAVE,CAAeF,CAAfE,EAAsBjI,CAAtBiI,CAA2BjI,CAA3BiI,EAAkCD,CAAlCC,CAAuCD,CAAvCC,EAA8ChI,CAA9CgI,CAAmDhI,CAAnDgI,CACS,EAAb,CAAIA,CAAJ,GACIjI,CACA,EADM0B,IAAAyB,KAAA,CAAU8E,CAAV,CACN,CAAAhI,CAAA,EAAMyB,IAAAyB,KAAA,CAAU8E,CAAV,CAFV,CAIIC,EAAAA,CAAIxG,IAAAyB,KAAA,EAAWnD,CAAX,CAAgBA,CAAhB,CAAsBC,CAAtB,CAA2BA,CAA3B,CAAiCD,CAAjC,CAAsCA,CAAtC,CAA4CgI,CAA5C,CAAiDA,CAAjD,CAAuD/H,CAAvD,CAA4DA,CAA5D,CAAkE8H,CAAlE,CAAuEA,CAAvE,GACH/H,CADG,CACEA,CADF,CACQgI,CADR,CACaA,CADb,CACmB/H,CADnB,CACwBA,CADxB,CAC8B8H,CAD9B,CACmCA,CADnC,EAEJb,EAAJ,GAAW7G,CAAX,GACI6H,CADJ,EACU,EADV,CAGIzG,MAAA,CAAMyG,CAAN,CAAJ,GACIA,CADJ,CACQ,CADR,CAGIC,EAAAA,CAAOD,CAAPC,CAAWnI,CAAXmI,CAAgBH,CAAhBG,CAAsBlI,CACtBmI;CAAAA,CAAOF,CAAPE,CAAW,CAACnI,CAAZmI,CAAiBL,CAAjBK,CAAuBpI,CACvBF,EAAAA,EAAMiD,CAANjD,CAAWmD,CAAXnD,EAAiB,CAAjBA,CAAuB4B,IAAAsD,IAAA,CAAS5E,CAAT,CAAvBN,CAAuCqI,CAAvCrI,CAA6C4B,IAAAwD,IAAA,CAAS9E,CAAT,CAA7CN,CAA6DsI,CAC7DrI,EAAAA,EAAMiD,CAANjD,CAAWmD,CAAXnD,EAAiB,CAAjBA,CAAuB2B,IAAAwD,IAAA,CAAS9E,CAAT,CAAvBL,CAAuCoI,CAAvCpI,CAA6C2B,IAAAsD,IAAA,CAAS5E,CAAT,CAA7CL,CAA6DqI,CAIjE,KAAIC,EAASA,QAAS,CAACnE,CAAD,CAAIoE,CAAJ,CAAO,CACzB,OAAQpE,CAAA,CAAE,CAAF,CAAR,CAAeoE,CAAA,CAAE,CAAF,CAAf,CAAsBpE,CAAA,CAAE,CAAF,CAAtB,CAA6BoE,CAAA,CAAE,CAAF,CAA7B,GAHO5G,IAAAyB,KAAA,CAGoCe,CAH1B,CAAE,CAAF,CAAV,CAGoCA,CAHnB,CAAE,CAAF,CAAjB,CAGoCA,CAHZ,CAAE,CAAF,CAAxB,CAGoCA,CAHL,CAAE,CAAF,CAA/B,CAGP,CAHOxC,IAAAyB,KAAA,CAG8CmF,CAHpC,CAAE,CAAF,CAAV,CAG8CA,CAH7B,CAAE,CAAF,CAAjB,CAG8CA,CAHtB,CAAE,CAAF,CAAxB,CAG8CA,CAHf,CAAE,CAAF,CAA/B,CAGP,CADyB,CAA7B,CAGIC,EAASA,QAAS,CAACrE,CAAD,CAAIoE,CAAJ,CAAO,CACzB,OAAQpE,CAAA,CAAE,CAAF,CAAA,CAAOoE,CAAA,CAAE,CAAF,CAAP,CAAcpE,CAAA,CAAE,CAAF,CAAd,CAAqBoE,CAAA,CAAE,CAAF,CAArB,CAA6B,EAA7B,CAAiC,CAAzC,EAA8C5G,IAAA8G,KAAA,CAAUH,CAAA,CAAOnE,CAAP,CAAUoE,CAAV,CAAV,CADrB,CAGzBpI,EAAAA,CAAQqI,CAAA,CAAO,CAAC,CAAD,CAAI,CAAJ,CAAP,CAAe,EAAER,CAAF,CAAOI,CAAP,EAAcnI,CAAd,EAAmBgI,CAAnB,CAAwBI,CAAxB,EAA+BnI,CAA/B,CAAf,CACRiE,EAAAA,CAAI,EAAE6D,CAAF,CAAOI,CAAP,EAAcnI,CAAd,EAAmBgI,CAAnB,CAAwBI,CAAxB,EAA+BnI,CAA/B,CACJqI,EAAAA,CAAI,EAAG,EAAH,CAAOP,CAAP,CAAYI,CAAZ,EAAmBnI,CAAnB,EAAyB,EAAzB,CAA6BgI,CAA7B,CAAkCI,CAAlC,EAAyCnI,CAAzC,CACJE,EAAAA,CAASoI,CAAA,CAAOrE,CAAP,CAAUoE,CAAV,CACQ,GAArB,EAAID,CAAA,CAAOnE,CAAP,CAAUoE,CAAV,CAAJ,GACInI,CADJ,CACauB,IAAAiG,GADb,CAGoB,EAApB,EAAIU,CAAA,CAAOnE,CAAP,CAAUoE,CAAV,CAAJ,GACInI,CADJ,CACa,CADb,CAGW,EAAX,GAAIE,CAAJ,EAAyB,CAAzB,CAAgBF,CAAhB,GACaA,CADb,EACsB,CADtB,CAC0BuB,IAAAiG,GAD1B,CAGW,EAAX,GAAItH,CAAJ,EAAyB,CAAzB,CAAgBF,CAAhB,GACaA,CADb,EACsB,CADtB,CAC0BuB,IAAAiG,GAD1B,CAGA,OAAO,CAAC7H,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CAAiBC,CAAjB,CAAwBC,CAAxB,CAAgCC,CAAhC,CAAqCC,CAArC,CA/CsF,CAiDjG,OAAO/B,EAxkBmB,CAAlB,CAykBVF,CAAAqK,MAzkBU,CA0kBZxL,EAAAqB,KAAA,CAAeA,CACfA,EAAAR,UAAA4K,UAAA;AAA2B,MAC3BpK,EAAAR,UAAA6K,oBAAA,CAAqC,CAAC,MAAD,CACrCtK,EAAAuK,cAAA,CAAuBtK,CAAvB,CACAH,EAAA0K,QAAAC,gBAAA,CAAkCxK,CAAlC,CAAwC,MAAxC,CACAJ,EAAA6K,WAAAC,WAAA,CAA6B1K,CAA7B,CAnmB6D;\",\n\"sources\":[\"node_modules/konva/lib/shapes/Path.js\"],\n\"sourcesContent\":[\"shadow$provide[58] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __extends = (this && this.__extends) || (function () {\\n    var extendStatics = function (d, b) {\\n        extendStatics = Object.setPrototypeOf ||\\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\\n        return extendStatics(d, b);\\n    };\\n    return function (d, b) {\\n        extendStatics(d, b);\\n        function __() { this.constructor = d; }\\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\n    };\\n})();\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar Util_1 = require(\\\"../Util\\\");\\nvar Factory_1 = require(\\\"../Factory\\\");\\nvar Shape_1 = require(\\\"../Shape\\\");\\nvar Global_1 = require(\\\"../Global\\\");\\nvar Path = (function (_super) {\\n    __extends(Path, _super);\\n    function Path(config) {\\n        var _this = _super.call(this, config) || this;\\n        _this.dataArray = [];\\n        _this.pathLength = 0;\\n        _this.dataArray = Path.parsePathData(_this.data());\\n        _this.pathLength = 0;\\n        for (var i = 0; i < _this.dataArray.length; ++i) {\\n            _this.pathLength += _this.dataArray[i].pathLength;\\n        }\\n        _this.on('dataChange.konva', function () {\\n            this.dataArray = Path.parsePathData(this.data());\\n            this.pathLength = 0;\\n            for (var i = 0; i < this.dataArray.length; ++i) {\\n                this.pathLength += this.dataArray[i].pathLength;\\n            }\\n        });\\n        return _this;\\n    }\\n    Path.prototype._sceneFunc = function (context) {\\n        var ca = this.dataArray;\\n        context.beginPath();\\n        for (var n = 0; n < ca.length; n++) {\\n            var c = ca[n].command;\\n            var p = ca[n].points;\\n            switch (c) {\\n                case 'L':\\n                    context.lineTo(p[0], p[1]);\\n                    break;\\n                case 'M':\\n                    context.moveTo(p[0], p[1]);\\n                    break;\\n                case 'C':\\n                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\\n                    break;\\n                case 'Q':\\n                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);\\n                    break;\\n                case 'A':\\n                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];\\n                    var r = rx > ry ? rx : ry;\\n                    var scaleX = rx > ry ? 1 : rx / ry;\\n                    var scaleY = rx > ry ? ry / rx : 1;\\n                    context.translate(cx, cy);\\n                    context.rotate(psi);\\n                    context.scale(scaleX, scaleY);\\n                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);\\n                    context.scale(1 / scaleX, 1 / scaleY);\\n                    context.rotate(-psi);\\n                    context.translate(-cx, -cy);\\n                    break;\\n                case 'z':\\n                    context.closePath();\\n                    break;\\n            }\\n        }\\n        context.fillStrokeShape(this);\\n    };\\n    Path.prototype.getSelfRect = function () {\\n        var points = [];\\n        this.dataArray.forEach(function (data) {\\n            points = points.concat(data.points);\\n        });\\n        var minX = points[0];\\n        var maxX = points[0];\\n        var minY = points[1];\\n        var maxY = points[1];\\n        var x, y;\\n        for (var i = 0; i < points.length / 2; i++) {\\n            x = points[i * 2];\\n            y = points[i * 2 + 1];\\n            if (!isNaN(x)) {\\n                minX = Math.min(minX, x);\\n                maxX = Math.max(maxX, x);\\n            }\\n            if (!isNaN(y)) {\\n                minY = Math.min(minY, y);\\n                maxY = Math.max(maxY, y);\\n            }\\n        }\\n        return {\\n            x: Math.round(minX),\\n            y: Math.round(minY),\\n            width: Math.round(maxX - minX),\\n            height: Math.round(maxY - minY)\\n        };\\n    };\\n    Path.prototype.getLength = function () {\\n        return this.pathLength;\\n    };\\n    Path.prototype.getPointAtLength = function (length) {\\n        var point, i = 0, ii = this.dataArray.length;\\n        if (!ii) {\\n            return null;\\n        }\\n        while (i < ii && length > this.dataArray[i].pathLength) {\\n            length -= this.dataArray[i].pathLength;\\n            ++i;\\n        }\\n        if (i === ii) {\\n            point = this.dataArray[i - 1].points.slice(-2);\\n            return {\\n                x: point[0],\\n                y: point[1]\\n            };\\n        }\\n        if (length < 0.01) {\\n            point = this.dataArray[i].points.slice(0, 2);\\n            return {\\n                x: point[0],\\n                y: point[1]\\n            };\\n        }\\n        var cp = this.dataArray[i];\\n        var p = cp.points;\\n        switch (cp.command) {\\n            case 'L':\\n                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);\\n            case 'C':\\n                return Path.getPointOnCubicBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);\\n            case 'Q':\\n                return Path.getPointOnQuadraticBezier(length / cp.pathLength, cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);\\n            case 'A':\\n                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];\\n                theta += (dTheta * length) / cp.pathLength;\\n                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);\\n        }\\n        return null;\\n    };\\n    Path.getLineLength = function (x1, y1, x2, y2) {\\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\\n    };\\n    Path.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {\\n        if (fromX === undefined) {\\n            fromX = P1x;\\n        }\\n        if (fromY === undefined) {\\n            fromY = P1y;\\n        }\\n        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);\\n        var run = Math.sqrt((dist * dist) / (1 + m * m));\\n        if (P2x < P1x) {\\n            run *= -1;\\n        }\\n        var rise = m * run;\\n        var pt;\\n        if (P2x === P1x) {\\n            pt = {\\n                x: fromX,\\n                y: fromY + rise\\n            };\\n        }\\n        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {\\n            pt = {\\n                x: fromX + run,\\n                y: fromY + rise\\n            };\\n        }\\n        else {\\n            var ix, iy;\\n            var len = this.getLineLength(P1x, P1y, P2x, P2y);\\n            if (len < 0.00000001) {\\n                return undefined;\\n            }\\n            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);\\n            u = u / (len * len);\\n            ix = P1x + u * (P2x - P1x);\\n            iy = P1y + u * (P2y - P1y);\\n            var pRise = this.getLineLength(fromX, fromY, ix, iy);\\n            var pRun = Math.sqrt(dist * dist - pRise * pRise);\\n            run = Math.sqrt((pRun * pRun) / (1 + m * m));\\n            if (P2x < P1x) {\\n                run *= -1;\\n            }\\n            rise = m * run;\\n            pt = {\\n                x: ix + run,\\n                y: iy + rise\\n            };\\n        }\\n        return pt;\\n    };\\n    Path.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {\\n        function CB1(t) {\\n            return t * t * t;\\n        }\\n        function CB2(t) {\\n            return 3 * t * t * (1 - t);\\n        }\\n        function CB3(t) {\\n            return 3 * t * (1 - t) * (1 - t);\\n        }\\n        function CB4(t) {\\n            return (1 - t) * (1 - t) * (1 - t);\\n        }\\n        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);\\n        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);\\n        return {\\n            x: x,\\n            y: y\\n        };\\n    };\\n    Path.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {\\n        function QB1(t) {\\n            return t * t;\\n        }\\n        function QB2(t) {\\n            return 2 * t * (1 - t);\\n        }\\n        function QB3(t) {\\n            return (1 - t) * (1 - t);\\n        }\\n        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);\\n        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);\\n        return {\\n            x: x,\\n            y: y\\n        };\\n    };\\n    Path.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {\\n        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);\\n        var pt = {\\n            x: rx * Math.cos(theta),\\n            y: ry * Math.sin(theta)\\n        };\\n        return {\\n            x: cx + (pt.x * cosPsi - pt.y * sinPsi),\\n            y: cy + (pt.x * sinPsi + pt.y * cosPsi)\\n        };\\n    };\\n    Path.parsePathData = function (data) {\\n        if (!data) {\\n            return [];\\n        }\\n        var cs = data;\\n        var cc = [\\n            'm',\\n            'M',\\n            'l',\\n            'L',\\n            'v',\\n            'V',\\n            'h',\\n            'H',\\n            'z',\\n            'Z',\\n            'c',\\n            'C',\\n            'q',\\n            'Q',\\n            't',\\n            'T',\\n            's',\\n            'S',\\n            'a',\\n            'A'\\n        ];\\n        cs = cs.replace(new RegExp(' ', 'g'), ',');\\n        for (var n = 0; n < cc.length; n++) {\\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\\n        }\\n        var arr = cs.split('|');\\n        var ca = [];\\n        var coords = [];\\n        var cpx = 0;\\n        var cpy = 0;\\n        var re = /([-+]?((\\\\d+\\\\.\\\\d+)|((\\\\d+)|(\\\\.\\\\d+)))(?:e[-+]?\\\\d+)?)/gi;\\n        var match;\\n        for (n = 1; n < arr.length; n++) {\\n            var str = arr[n];\\n            var c = str.charAt(0);\\n            str = str.slice(1);\\n            coords.length = 0;\\n            while ((match = re.exec(str))) {\\n                coords.push(match[0]);\\n            }\\n            var p = [];\\n            for (var j = 0, jlen = coords.length; j < jlen; j++) {\\n                var parsed = parseFloat(coords[j]);\\n                if (!isNaN(parsed)) {\\n                    p.push(parsed);\\n                }\\n                else {\\n                    p.push(0);\\n                }\\n            }\\n            while (p.length > 0) {\\n                if (isNaN(p[0])) {\\n                    break;\\n                }\\n                var cmd = null;\\n                var points = [];\\n                var startX = cpx, startY = cpy;\\n                var prevCmd, ctlPtx, ctlPty;\\n                var rx, ry, psi, fa, fs, x1, y1;\\n                switch (c) {\\n                    case 'l':\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'L';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'L':\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'm':\\n                        var dx = p.shift();\\n                        var dy = p.shift();\\n                        cpx += dx;\\n                        cpy += dy;\\n                        cmd = 'M';\\n                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {\\n                            for (var idx = ca.length - 2; idx >= 0; idx--) {\\n                                if (ca[idx].command === 'M') {\\n                                    cpx = ca[idx].points[0] + dx;\\n                                    cpy = ca[idx].points[1] + dy;\\n                                    break;\\n                                }\\n                            }\\n                        }\\n                        points.push(cpx, cpy);\\n                        c = 'l';\\n                        break;\\n                    case 'M':\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        cmd = 'M';\\n                        points.push(cpx, cpy);\\n                        c = 'L';\\n                        break;\\n                    case 'h':\\n                        cpx += p.shift();\\n                        cmd = 'L';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'H':\\n                        cpx = p.shift();\\n                        cmd = 'L';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'v':\\n                        cpy += p.shift();\\n                        cmd = 'L';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'V':\\n                        cpy = p.shift();\\n                        cmd = 'L';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'C':\\n                        points.push(p.shift(), p.shift(), p.shift(), p.shift());\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'c':\\n                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'C';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'S':\\n                        ctlPtx = cpx;\\n                        ctlPty = cpy;\\n                        prevCmd = ca[ca.length - 1];\\n                        if (prevCmd.command === 'C') {\\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\\n                        }\\n                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        cmd = 'C';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 's':\\n                        ctlPtx = cpx;\\n                        ctlPty = cpy;\\n                        prevCmd = ca[ca.length - 1];\\n                        if (prevCmd.command === 'C') {\\n                            ctlPtx = cpx + (cpx - prevCmd.points[2]);\\n                            ctlPty = cpy + (cpy - prevCmd.points[3]);\\n                        }\\n                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'C';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'Q':\\n                        points.push(p.shift(), p.shift());\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'q':\\n                        points.push(cpx + p.shift(), cpy + p.shift());\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'Q';\\n                        points.push(cpx, cpy);\\n                        break;\\n                    case 'T':\\n                        ctlPtx = cpx;\\n                        ctlPty = cpy;\\n                        prevCmd = ca[ca.length - 1];\\n                        if (prevCmd.command === 'Q') {\\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\\n                        }\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        cmd = 'Q';\\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\\n                        break;\\n                    case 't':\\n                        ctlPtx = cpx;\\n                        ctlPty = cpy;\\n                        prevCmd = ca[ca.length - 1];\\n                        if (prevCmd.command === 'Q') {\\n                            ctlPtx = cpx + (cpx - prevCmd.points[0]);\\n                            ctlPty = cpy + (cpy - prevCmd.points[1]);\\n                        }\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'Q';\\n                        points.push(ctlPtx, ctlPty, cpx, cpy);\\n                        break;\\n                    case 'A':\\n                        rx = p.shift();\\n                        ry = p.shift();\\n                        psi = p.shift();\\n                        fa = p.shift();\\n                        fs = p.shift();\\n                        x1 = cpx;\\n                        y1 = cpy;\\n                        cpx = p.shift();\\n                        cpy = p.shift();\\n                        cmd = 'A';\\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\\n                        break;\\n                    case 'a':\\n                        rx = p.shift();\\n                        ry = p.shift();\\n                        psi = p.shift();\\n                        fa = p.shift();\\n                        fs = p.shift();\\n                        x1 = cpx;\\n                        y1 = cpy;\\n                        cpx += p.shift();\\n                        cpy += p.shift();\\n                        cmd = 'A';\\n                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);\\n                        break;\\n                }\\n                ca.push({\\n                    command: cmd || c,\\n                    points: points,\\n                    start: {\\n                        x: startX,\\n                        y: startY\\n                    },\\n                    pathLength: this.calcLength(startX, startY, cmd || c, points)\\n                });\\n            }\\n            if (c === 'z' || c === 'Z') {\\n                ca.push({\\n                    command: 'z',\\n                    points: [],\\n                    start: undefined,\\n                    pathLength: 0\\n                });\\n            }\\n        }\\n        return ca;\\n    };\\n    Path.calcLength = function (x, y, cmd, points) {\\n        var len, p1, p2, t;\\n        var path = Path;\\n        switch (cmd) {\\n            case 'L':\\n                return path.getLineLength(x, y, points[0], points[1]);\\n            case 'C':\\n                len = 0.0;\\n                p1 = path.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\\n                for (t = 0.01; t <= 1; t += 0.01) {\\n                    p2 = path.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\\n                    p1 = p2;\\n                }\\n                return len;\\n            case 'Q':\\n                len = 0.0;\\n                p1 = path.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\\n                for (t = 0.01; t <= 1; t += 0.01) {\\n                    p2 = path.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\\n                    len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\\n                    p1 = p2;\\n                }\\n                return len;\\n            case 'A':\\n                len = 0.0;\\n                var start = points[4];\\n                var dTheta = points[5];\\n                var end = points[4] + dTheta;\\n                var inc = Math.PI / 180.0;\\n                if (Math.abs(start - end) < inc) {\\n                    inc = Math.abs(start - end);\\n                }\\n                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\\n                if (dTheta < 0) {\\n                    for (t = start - inc; t > end; t -= inc) {\\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\\n                        p1 = p2;\\n                    }\\n                }\\n                else {\\n                    for (t = start + inc; t < end; t += inc) {\\n                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\\n                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\\n                        p1 = p2;\\n                    }\\n                }\\n                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\\n                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);\\n                return len;\\n        }\\n        return 0;\\n    };\\n    Path.convertEndpointToCenterParameterization = function (x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {\\n        var psi = psiDeg * (Math.PI / 180.0);\\n        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;\\n        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +\\n            (Math.cos(psi) * (y1 - y2)) / 2.0;\\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\\n        if (lambda > 1) {\\n            rx *= Math.sqrt(lambda);\\n            ry *= Math.sqrt(lambda);\\n        }\\n        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /\\n            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));\\n        if (fa === fs) {\\n            f *= -1;\\n        }\\n        if (isNaN(f)) {\\n            f = 0;\\n        }\\n        var cxp = (f * rx * yp) / ry;\\n        var cyp = (f * -ry * xp) / rx;\\n        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;\\n        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;\\n        var vMag = function (v) {\\n            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\\n        };\\n        var vRatio = function (u, v) {\\n            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\\n        };\\n        var vAngle = function (u, v) {\\n            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));\\n        };\\n        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);\\n        var u = [(xp - cxp) / rx, (yp - cyp) / ry];\\n        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];\\n        var dTheta = vAngle(u, v);\\n        if (vRatio(u, v) <= -1) {\\n            dTheta = Math.PI;\\n        }\\n        if (vRatio(u, v) >= 1) {\\n            dTheta = 0;\\n        }\\n        if (fs === 0 && dTheta > 0) {\\n            dTheta = dTheta - 2 * Math.PI;\\n        }\\n        if (fs === 1 && dTheta < 0) {\\n            dTheta = dTheta + 2 * Math.PI;\\n        }\\n        return [cx, cy, rx, ry, theta, dTheta, psi, fs];\\n    };\\n    return Path;\\n}(Shape_1.Shape));\\nexports.Path = Path;\\nPath.prototype.className = 'Path';\\nPath.prototype._attrsAffectingSize = ['data'];\\nGlobal_1._registerNode(Path);\\nFactory_1.Factory.addGetterSetter(Path, 'data');\\nUtil_1.Collection.mapMethods(Path);\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__extends\",\"extendStatics\",\"d\",\"b\",\"Object\",\"setPrototypeOf\",\"__proto__\",\"Array\",\"p\",\"hasOwnProperty\",\"__\",\"constructor\",\"prototype\",\"create\",\"defineProperty\",\"value\",\"Util_1\",\"Factory_1\",\"Shape_1\",\"Global_1\",\"Path\",\"_super\",\"config\",\"_this\",\"call\",\"dataArray\",\"pathLength\",\"parsePathData\",\"data\",\"i\",\"length\",\"on\",\"_sceneFunc\",\"Path.prototype._sceneFunc\",\"context\",\"ca\",\"beginPath\",\"n\",\"points\",\"command\",\"lineTo\",\"moveTo\",\"bezierCurveTo\",\"quadraticCurveTo\",\"cx\",\"cy\",\"rx\",\"ry\",\"theta\",\"dTheta\",\"psi\",\"fs\",\"r\",\"scaleX\",\"scaleY\",\"translate\",\"rotate\",\"scale\",\"arc\",\"closePath\",\"fillStrokeShape\",\"getSelfRect\",\"Path.prototype.getSelfRect\",\"forEach\",\"concat\",\"minX\",\"maxX\",\"minY\",\"maxY\",\"x\",\"y\",\"isNaN\",\"Math\",\"min\",\"max\",\"round\",\"width\",\"height\",\"getLength\",\"Path.prototype.getLength\",\"getPointAtLength\",\"Path.prototype.getPointAtLength\",\"ii\",\"point\",\"slice\",\"cp\",\"getPointOnLine\",\"start\",\"getPointOnCubicBezier\",\"getPointOnQuadraticBezier\",\"getPointOnEllipticalArc\",\"getLineLength\",\"Path.getLineLength\",\"x1\",\"y1\",\"x2\",\"y2\",\"sqrt\",\"Path.getPointOnLine\",\"dist\",\"P1x\",\"P1y\",\"P2x\",\"P2y\",\"fromX\",\"fromY\",\"undefined\",\"m\",\"run\",\"rise\",\"pt\",\"len\",\"u\",\"ix\",\"pRise\",\"iy\",\"pRun\",\"Path.getPointOnCubicBezier\",\"pct\",\"P3x\",\"P3y\",\"P4x\",\"P4y\",\"Path.getPointOnQuadraticBezier\",\"Path.getPointOnEllipticalArc\",\"cosPsi\",\"cos\",\"sinPsi\",\"sin\",\"Path.parsePathData\",\"cc\",\"cs\",\"replace\",\"RegExp\",\"arr\",\"split\",\"coords\",\"cpx\",\"cpy\",\"re\",\"match\",\"str\",\"c\",\"charAt\",\"exec\",\"push\",\"j\",\"jlen\",\"parsed\",\"parseFloat\",\"cmd\",\"startX\",\"startY\",\"ctlPty\",\"shift\",\"dx\",\"dy\",\"idx\",\"ctlPtx\",\"prevCmd\",\"fa\",\"convertEndpointToCenterParameterization\",\"calcLength\",\"Path.calcLength\",\"t\",\"p1\",\"p2\",\"end\",\"inc\",\"PI\",\"abs\",\"Path.convertEndpointToCenterParameterization\",\"psiDeg\",\"xp\",\"yp\",\"lambda\",\"f\",\"cxp\",\"cyp\",\"vRatio\",\"v\",\"vAngle\",\"acos\",\"Shape\",\"className\",\"_attrsAffectingSize\",\"_registerNode\",\"Factory\",\"addGetterSetter\",\"Collection\",\"mapMethods\"]\n}\n"]