["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-konva/lib/invariant.js"],"~:js","shadow$provide.module$node_modules$react_konva$lib$invariant=function(global,require,module,exports){module.exports=function(condition,format){for(var _len=arguments.length,args=Array(2<_len?_len-2:0),_key=2;_key<_len;_key++)args[_key-2]=arguments[_key];if(!condition){if(void 0===format)_len=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var argIndex=0;_len=Error(format.replace(/%s/g,function(){return String(args[argIndex++])}));\n_len.name=\"Invariant Violation\"}_len.framesToPop=1;throw _len;}}}","~:source","shadow$provide[\"module$node_modules$react_konva$lib$invariant\"] = function(global,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n'use strict';\n\nvar validateFormat = process.env.NODE_ENV !== 'production' ? function (format) {} : function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n};\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["framesToPop","name"]],"~:compiled-at",1606342205829,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_konva$lib$invariant.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoD1GD,MAAAC,QAAA,CA1BAC,QAAkB,CAACC,SAAD,CAAYC,MAAZ,CAAoB,CACpC,IADoC,IAC3BC,KAAOC,SAAAC,OADoB,CACFC,KAAWC,KAAJ,CAAiB,CAAP,CAAAJ,IAAA,CAAWA,IAAX,CAAkB,CAAlB,CAAsB,CAAhC,CADL,CACyCK,KAAO,CAApF,CAAuFA,IAAvF,CAA8FL,IAA9F,CAAoGK,IAAA,EAApG,CACEF,IAAA,CAAKE,IAAL,CAAY,CAAZ,CAAA,CAAiBJ,SAAA,CAAUI,IAAV,CAKnB,IAAI,CAACP,SAAL,CAAgB,CAGd,GAAeQ,IAAAA,EAAf,GAAIP,MAAJ,CACEQ,IAAA,CAAYC,KAAJ,CAAU,+HAAV,CADV,KAEO,CACL,IAAIC,SAAW,CACfF,KAAA,CAAYC,KAAJ,CAAUT,MAAAW,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOC,OAAA,CAAOR,IAAA,CAAKM,QAAA,EAAL,CAAP,CAD2C,CAAlC,CAAV,CAGRF;IAAAK,KAAA,CAAa,qBALR,CAQPL,IAAAM,YAAA,CAAoB,CAEpB,MAAMN,KAAN,CAfc,CAPoB,CA1BoE;\",\n\"sources\":[\"node_modules/react-konva/lib/invariant.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_konva$lib$invariant\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n *\\n */\\n'use strict';\\n\\nvar validateFormat = process.env.NODE_ENV !== 'production' ? function (format) {} : function (format) {\\n  if (format === undefined) {\\n    throw new Error('invariant(...): Second argument must be a string.');\\n  }\\n};\\n/**\\n * Use invariant() to assert state which your program assumes to be true.\\n *\\n * Provide sprintf-style format (only %s is supported) and arguments to provide\\n * information about what broke and what you were expecting.\\n *\\n * The invariant message will be stripped in production, but the invariant will\\n * remain to ensure logic does not differ in production.\\n */\\n\\nfunction invariant(condition, format) {\\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\\n    args[_key - 2] = arguments[_key];\\n  }\\n\\n  validateFormat(format);\\n\\n  if (!condition) {\\n    var error;\\n\\n    if (format === undefined) {\\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\\n    } else {\\n      var argIndex = 0;\\n      error = new Error(format.replace(/%s/g, function () {\\n        return String(args[argIndex++]);\\n      }));\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // Skip invariant's own stack frame.\\n\\n    throw error;\\n  }\\n}\\n\\nmodule.exports = invariant;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"invariant\",\"condition\",\"format\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"undefined\",\"error\",\"Error\",\"argIndex\",\"replace\",\"String\",\"name\",\"framesToPop\"]\n}\n"]