["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/konva/lib/shapes/Text.js"],"~:js","shadow$provide.module$node_modules$konva$lib$shapes$Text=function(global,require,module,exports){function getDummyContext(){return dummyContext?dummyContext:dummyContext=Util_1.Util.createCanvasElement().getContext(\"2d\")}function checkDefaultFill(config){config=config||{};config.fillLinearGradientColorStops||config.fillRadialGradientColorStops||config.fillPatternImage||(config.fill=config.fill||\"black\");return config}var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,\nb$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,\"__esModule\",{value:!0});var Util_1=require(\"module$node_modules$konva$lib$Util\");global=require(\"module$node_modules$konva$lib$Factory\");\nvar Shape_1=require(\"module$node_modules$konva$lib$Shape\"),Global_1=require(\"module$node_modules$konva$lib$Global\");module=require(\"module$node_modules$konva$lib$Validators\");require=require(\"module$node_modules$konva$lib$Global\");var ATTR_CHANGE_LIST=\"fontFamily fontSize fontStyle fontVariant padding align verticalAlign lineHeight text width height wrap ellipsis letterSpacing\".split(\" \"),attrChangeListLen=ATTR_CHANGE_LIST.length,dummyContext;Shape_1=function(_super){function Text(config){config=\n_super.call(this,checkDefaultFill(config))||this;config._partialTextX=0;for(var n=config._partialTextY=0;n<attrChangeListLen;n++)config.on(ATTR_CHANGE_LIST[n]+\"Change.konva\",config._setTextData);config._setTextData();return config}__extends(Text,_super);Text.prototype._sceneFunc=function(context){var padding=this.padding(),fontSize=this.fontSize(),lineHeightPx=this.lineHeight()*fontSize,textArr=this.textArr,textArrLen=textArr.length,verticalAlign=this.verticalAlign(),alignY=0,align=this.align(),totalWidth=\nthis.getWidth(),letterSpacing=this.letterSpacing(),fill=this.fill(),textDecoration=this.textDecoration(),shouldUnderline=-1!==textDecoration.indexOf(\"underline\");textDecoration=-1!==textDecoration.indexOf(\"line-through\");var translateY=lineHeightPx/2;context.setAttr(\"font\",this._getContextFont());context.setAttr(\"textBaseline\",\"middle\");context.setAttr(\"textAlign\",\"left\");\"middle\"===verticalAlign?alignY=(this.getHeight()-textArrLen*lineHeightPx-2*padding)/2:\"bottom\"===verticalAlign&&(alignY=this.getHeight()-\ntextArrLen*lineHeightPx-2*padding);context.translate(padding,alignY+padding);for(verticalAlign=0;verticalAlign<textArrLen;verticalAlign++){alignY=0;var obj=textArr[verticalAlign],text=obj.text;obj=obj.width;var lastLine=verticalAlign!==textArrLen-1;context.save();\"right\"===align?alignY+=totalWidth-obj-2*padding:\"center\"===align&&(alignY+=(totalWidth-obj-2*padding)/2);if(shouldUnderline){context.save();context.beginPath();context.moveTo(alignY,translateY+0+Math.round(fontSize/2));var spacesNumber=\ntext.split(\" \").length-1;spacesNumber=0===spacesNumber;spacesNumber=\"justify\"===align&&lastLine&&!spacesNumber?totalWidth-2*padding:obj;context.lineTo(alignY+Math.round(spacesNumber),translateY+0+Math.round(fontSize/2));context.lineWidth=fontSize/15;context.strokeStyle=fill;context.stroke();context.restore()}textDecoration&&(context.save(),context.beginPath(),context.moveTo(alignY,translateY+0),spacesNumber=text.split(\" \").length-1,spacesNumber=0===spacesNumber,spacesNumber=\"justify\"===align&&lastLine&&\n!spacesNumber?totalWidth-2*padding:obj,context.lineTo(alignY+Math.round(spacesNumber),translateY+0),context.lineWidth=fontSize/15,context.strokeStyle=fill,context.stroke(),context.restore());if(0!==letterSpacing||\"justify\"===align)for(spacesNumber=text.split(\" \").length-1,lastLine=0;lastLine<text.length;lastLine++){var letter=text[lastLine];\" \"===letter&&verticalAlign!==textArrLen-1&&\"justify\"===align&&(alignY+=Math.floor((totalWidth-2*padding-obj)/spacesNumber));this._partialTextX=alignY;this._partialTextY=\ntranslateY+0;this._partialText=letter;context.fillStrokeShape(this);alignY+=Math.round(this.measureSize(letter).width)+letterSpacing}else this._partialTextX=alignY,this._partialTextY=translateY+0,this._partialText=text,context.fillStrokeShape(this);context.restore();1<textArrLen&&(translateY+=lineHeightPx)}};Text.prototype._hitFunc=function(context){var width=this.getWidth(),height=this.getHeight();context.beginPath();context.rect(0,0,width,height);context.closePath();context.fillStrokeShape(this)};\nText.prototype.setText=function(text){text=Util_1.Util._isString(text)?text:(text||\"\").toString();this._setAttr(\"text\",text);return this};Text.prototype.getWidth=function(){return\"auto\"===this.attrs.width||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width};Text.prototype.getHeight=function(){return\"auto\"===this.attrs.height||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height};Text.prototype.getTextWidth=\nfunction(){return this.textWidth};Text.prototype.getTextHeight=function(){Util_1.Util.warn(\"text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.\");return this.textHeight};Text.prototype.measureSize=function(text){var _context=getDummyContext(),fontSize=this.fontSize();_context.save();_context.font=this._getContextFont();text=_context.measureText(text);_context.restore();return{width:text.width,height:fontSize}};Text.prototype._getContextFont=\nfunction(){return Global_1.Konva.UA.isIE?this.fontStyle()+\" \"+this.fontSize()+\"px \"+this.fontFamily():this.fontStyle()+\" \"+this.fontVariant()+\" \"+this.fontSize()+\"px \"+this.fontFamily()};Text.prototype._addTextLine=function(line){\"justify\"===this.align()&&(line=line.trim());var width=this._getTextWidth(line);return this.textArr.push({text:line,width:width})};Text.prototype._getTextWidth=function(text){var letterSpacing=this.letterSpacing(),length=text.length;return getDummyContext().measureText(text).width+\n(length?letterSpacing*(length-1):0)};Text.prototype._setTextData=function(){var lines=this.text().split(\"\\n\"),fontSize=+this.fontSize(),textWidth=0,lineHeightPx=this.lineHeight()*fontSize,width=this.attrs.width,height=this.attrs.height,fixedWidth=\"auto\"!==width&&void 0!==width,fixedHeight=\"auto\"!==height&&void 0!==height,padding=this.padding();width-=2*padding;height-=2*padding;padding=0;var wrap=this.wrap(),shouldWrap=\"none\"!==wrap;wrap=\"char\"!==wrap&&shouldWrap;var shouldAddEllipsis=this.ellipsis()&&\n!shouldWrap;this.textArr=[];getDummyContext().font=this._getContextFont();for(var additionalWidth=shouldAddEllipsis?this._getTextWidth(\"…\"):0,i=0,max=lines.length;i<max;++i){var line=lines[i],lineWidth=this._getTextWidth(line);if(fixedWidth&&lineWidth>width)for(;0<line.length;){lineWidth=0;for(var high=line.length,match=\"\",matchWidth=0;lineWidth<high;){var mid=lineWidth+high>>>1,substr=line.slice(0,mid+1),substrWidth=this._getTextWidth(substr)+additionalWidth;substrWidth<=width?(lineWidth=mid+1,match=\nsubstr+(shouldAddEllipsis?\"…\":\"\"),matchWidth=substrWidth):high=mid}if(match){wrap&&(high=line[match.length],high=(\" \"===high||\"-\"===high)&&matchWidth<=width?match.length:Math.max(match.lastIndexOf(\" \"),match.lastIndexOf(\"-\"))+1,0<high&&(lineWidth=high,match=match.slice(0,lineWidth),matchWidth=this._getTextWidth(match)));match=match.trimRight();this._addTextLine(match);textWidth=Math.max(textWidth,matchWidth);padding+=lineHeightPx;if(!shouldWrap||fixedHeight&&padding+lineHeightPx>height)break;line=\nline.slice(lineWidth);line=line.trimLeft();if(0<line.length&&(lineWidth=this._getTextWidth(line),lineWidth<=width)){this._addTextLine(line);padding+=lineHeightPx;textWidth=Math.max(textWidth,lineWidth);break}}else break}else this._addTextLine(line),padding+=lineHeightPx,textWidth=Math.max(textWidth,lineWidth);if(fixedHeight&&padding+lineHeightPx>height)break}this.textHeight=fontSize;this.textWidth=textWidth};Text.prototype.getStrokeScaleEnabled=function(){return!0};return Text}(Shape_1.Shape);exports.Text=\nShape_1;Shape_1.prototype._fillFunc=function(context){context.fillText(this._partialText,this._partialTextX,this._partialTextY)};Shape_1.prototype._strokeFunc=function(context){context.strokeText(this._partialText,this._partialTextX,this._partialTextY)};Shape_1.prototype.className=\"Text\";Shape_1.prototype._attrsAffectingSize=[\"text\",\"fontSize\",\"padding\",\"wrap\",\"lineHeight\"];require._registerNode(Shape_1);global.Factory.overWriteSetter(Shape_1,\"width\",module.getNumberOrAutoValidator());global.Factory.overWriteSetter(Shape_1,\n\"height\",module.getNumberOrAutoValidator());global.Factory.addGetterSetter(Shape_1,\"fontFamily\",\"Arial\");global.Factory.addGetterSetter(Shape_1,\"fontSize\",12,module.getNumberValidator());global.Factory.addGetterSetter(Shape_1,\"fontStyle\",\"normal\");global.Factory.addGetterSetter(Shape_1,\"fontVariant\",\"normal\");global.Factory.addGetterSetter(Shape_1,\"padding\",0,module.getNumberValidator());global.Factory.addGetterSetter(Shape_1,\"align\",\"left\");global.Factory.addGetterSetter(Shape_1,\"verticalAlign\",\n\"top\");global.Factory.addGetterSetter(Shape_1,\"lineHeight\",1,module.getNumberValidator());global.Factory.addGetterSetter(Shape_1,\"wrap\",\"word\");global.Factory.addGetterSetter(Shape_1,\"ellipsis\",!1);global.Factory.addGetterSetter(Shape_1,\"letterSpacing\",0,module.getNumberValidator());global.Factory.addGetterSetter(Shape_1,\"text\",\"\",module.getStringValidator());global.Factory.addGetterSetter(Shape_1,\"textDecoration\",\"\");Util_1.Collection.mapMethods(Shape_1)}","~:source","shadow$provide[\"module$node_modules$konva$lib$shapes$Text\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Util_1 = require(\"../Util\");\nvar Factory_1 = require(\"../Factory\");\nvar Shape_1 = require(\"../Shape\");\nvar Global_1 = require(\"../Global\");\nvar Validators_1 = require(\"../Validators\");\nvar Global_2 = require(\"../Global\");\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing'\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nvar Text = (function (_super) {\n    __extends(Text, _super);\n    function Text(config) {\n        var _this = _super.call(this, checkDefaultFill(config)) || this;\n        _this._partialTextX = 0;\n        _this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\n        }\n        _this._setTextData();\n        return _this;\n    }\n    Text.prototype._sceneFunc = function (context) {\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, textArr = this.textArr, textArrLen = textArr.length, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                for (var li = 0; li < text.length; li++) {\n                    var letter = text[li];\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n                        lineTranslateX += Math.floor((totalWidth - padding * 2 - width) / spacesNumber);\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX +=\n                        Math.round(this.measureSize(letter).width) + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    };\n    Text.prototype._hitFunc = function (context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    };\n    Text.prototype.setText = function (text) {\n        var str = Util_1.Util._isString(text) ? text : (text || '').toString();\n        this._setAttr(TEXT, str);\n        return this;\n    };\n    Text.prototype.getWidth = function () {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    };\n    Text.prototype.getHeight = function () {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    };\n    Text.prototype.getTextWidth = function () {\n        return this.textWidth;\n    };\n    Text.prototype.getTextHeight = function () {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    };\n    Text.prototype.measureSize = function (text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize\n        };\n    };\n    Text.prototype._getContextFont = function () {\n        if (Global_1.Konva.UA.isIE) {\n            return (this.fontStyle() +\n                SPACE +\n                this.fontSize() +\n                PX_SPACE +\n                this.fontFamily());\n        }\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            this.fontSize() +\n            PX_SPACE +\n            this.fontFamily());\n    };\n    Text.prototype._addTextLine = function (line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({ text: line, width: width });\n    };\n    Text.prototype._getTextWidth = function (text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    };\n    Text.prototype._setTextData = function () {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis() && !shouldWrap;\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr + (shouldAddEllipsis ? ELLIPSIS : '');\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        if (!shouldWrap ||\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    };\n    Text.prototype.getStrokeScaleEnabled = function () {\n        return true;\n    };\n    return Text;\n}(Shape_1.Shape));\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight'\n];\nGlobal_2._registerNode(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false);\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\nUtil_1.Collection.mapMethods(Text);\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$konva$lib$Factory","~$module$node_modules$konva$lib$Validators","~$shadow.js","~$module$node_modules$konva$lib$Global","~$module$node_modules$konva$lib$Shape","~$module$node_modules$konva$lib$Util"]],"~:properties",["^5",["width","getWidth","lineWidth","_addTextLine","_partialTextY","prototype","height","_strokeFunc","setText","getTextWidth","className","_partialText","__esModule","textHeight","_getContextFont","_sceneFunc","getTextHeight","measureSize","value","textWidth","text","fill","getStrokeScaleEnabled","_getTextWidth","getHeight","font","_hitFunc","__proto__","_fillFunc","_attrsAffectingSize","Text","_setTextData","_partialTextX","strokeStyle","textArr","constructor"]],"~:compiled-at",1606342205854,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$konva$lib$shapes$Text.js\",\n\"lineCount\":19,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/konva/lib/shapes/Text.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$konva$lib$shapes$Text\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __extends = (this && this.__extends) || (function () {\\n    var extendStatics = function (d, b) {\\n        extendStatics = Object.setPrototypeOf ||\\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\\n        return extendStatics(d, b);\\n    };\\n    return function (d, b) {\\n        extendStatics(d, b);\\n        function __() { this.constructor = d; }\\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\n    };\\n})();\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nvar Util_1 = require(\\\"../Util\\\");\\nvar Factory_1 = require(\\\"../Factory\\\");\\nvar Shape_1 = require(\\\"../Shape\\\");\\nvar Global_1 = require(\\\"../Global\\\");\\nvar Validators_1 = require(\\\"../Validators\\\");\\nvar Global_2 = require(\\\"../Global\\\");\\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '\\u2026', ATTR_CHANGE_LIST = [\\n    'fontFamily',\\n    'fontSize',\\n    'fontStyle',\\n    'fontVariant',\\n    'padding',\\n    'align',\\n    'verticalAlign',\\n    'lineHeight',\\n    'text',\\n    'width',\\n    'height',\\n    'wrap',\\n    'ellipsis',\\n    'letterSpacing'\\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\\nvar dummyContext;\\nfunction getDummyContext() {\\n    if (dummyContext) {\\n        return dummyContext;\\n    }\\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\\n    return dummyContext;\\n}\\nfunction _fillFunc(context) {\\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\\n}\\nfunction _strokeFunc(context) {\\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\\n}\\nfunction checkDefaultFill(config) {\\n    config = config || {};\\n    if (!config.fillLinearGradientColorStops &&\\n        !config.fillRadialGradientColorStops &&\\n        !config.fillPatternImage) {\\n        config.fill = config.fill || 'black';\\n    }\\n    return config;\\n}\\nvar Text = (function (_super) {\\n    __extends(Text, _super);\\n    function Text(config) {\\n        var _this = _super.call(this, checkDefaultFill(config)) || this;\\n        _this._partialTextX = 0;\\n        _this._partialTextY = 0;\\n        for (var n = 0; n < attrChangeListLen; n++) {\\n            _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\\n        }\\n        _this._setTextData();\\n        return _this;\\n    }\\n    Text.prototype._sceneFunc = function (context) {\\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, textArr = this.textArr, textArrLen = textArr.length, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\\n        var translateY = 0;\\n        var translateY = lineHeightPx / 2;\\n        var lineTranslateX = 0;\\n        var lineTranslateY = 0;\\n        context.setAttr('font', this._getContextFont());\\n        context.setAttr('textBaseline', MIDDLE);\\n        context.setAttr('textAlign', LEFT);\\n        if (verticalAlign === MIDDLE) {\\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\\n        }\\n        else if (verticalAlign === BOTTOM) {\\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\\n        }\\n        context.translate(padding, alignY + padding);\\n        for (n = 0; n < textArrLen; n++) {\\n            var lineTranslateX = 0;\\n            var lineTranslateY = 0;\\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\\n            context.save();\\n            if (align === RIGHT) {\\n                lineTranslateX += totalWidth - width - padding * 2;\\n            }\\n            else if (align === CENTER) {\\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\\n            }\\n            if (shouldUnderline) {\\n                context.save();\\n                context.beginPath();\\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\\n                spacesNumber = text.split(' ').length - 1;\\n                oneWord = spacesNumber === 0;\\n                lineWidth =\\n                    align === JUSTIFY && lastLine && !oneWord\\n                        ? totalWidth - padding * 2\\n                        : width;\\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\\n                context.lineWidth = fontSize / 15;\\n                context.strokeStyle = fill;\\n                context.stroke();\\n                context.restore();\\n            }\\n            if (shouldLineThrough) {\\n                context.save();\\n                context.beginPath();\\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\\n                spacesNumber = text.split(' ').length - 1;\\n                oneWord = spacesNumber === 0;\\n                lineWidth =\\n                    align === JUSTIFY && lastLine && !oneWord\\n                        ? totalWidth - padding * 2\\n                        : width;\\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\\n                context.lineWidth = fontSize / 15;\\n                context.strokeStyle = fill;\\n                context.stroke();\\n                context.restore();\\n            }\\n            if (letterSpacing !== 0 || align === JUSTIFY) {\\n                spacesNumber = text.split(' ').length - 1;\\n                for (var li = 0; li < text.length; li++) {\\n                    var letter = text[li];\\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\\n                        lineTranslateX += Math.floor((totalWidth - padding * 2 - width) / spacesNumber);\\n                    }\\n                    this._partialTextX = lineTranslateX;\\n                    this._partialTextY = translateY + lineTranslateY;\\n                    this._partialText = letter;\\n                    context.fillStrokeShape(this);\\n                    lineTranslateX +=\\n                        Math.round(this.measureSize(letter).width) + letterSpacing;\\n                }\\n            }\\n            else {\\n                this._partialTextX = lineTranslateX;\\n                this._partialTextY = translateY + lineTranslateY;\\n                this._partialText = text;\\n                context.fillStrokeShape(this);\\n            }\\n            context.restore();\\n            if (textArrLen > 1) {\\n                translateY += lineHeightPx;\\n            }\\n        }\\n    };\\n    Text.prototype._hitFunc = function (context) {\\n        var width = this.getWidth(), height = this.getHeight();\\n        context.beginPath();\\n        context.rect(0, 0, width, height);\\n        context.closePath();\\n        context.fillStrokeShape(this);\\n    };\\n    Text.prototype.setText = function (text) {\\n        var str = Util_1.Util._isString(text) ? text : (text || '').toString();\\n        this._setAttr(TEXT, str);\\n        return this;\\n    };\\n    Text.prototype.getWidth = function () {\\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\\n    };\\n    Text.prototype.getHeight = function () {\\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\\n        return isAuto\\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\\n                this.padding() * 2\\n            : this.attrs.height;\\n    };\\n    Text.prototype.getTextWidth = function () {\\n        return this.textWidth;\\n    };\\n    Text.prototype.getTextHeight = function () {\\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\\n        return this.textHeight;\\n    };\\n    Text.prototype.measureSize = function (text) {\\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\\n        _context.save();\\n        _context.font = this._getContextFont();\\n        metrics = _context.measureText(text);\\n        _context.restore();\\n        return {\\n            width: metrics.width,\\n            height: fontSize\\n        };\\n    };\\n    Text.prototype._getContextFont = function () {\\n        if (Global_1.Konva.UA.isIE) {\\n            return (this.fontStyle() +\\n                SPACE +\\n                this.fontSize() +\\n                PX_SPACE +\\n                this.fontFamily());\\n        }\\n        return (this.fontStyle() +\\n            SPACE +\\n            this.fontVariant() +\\n            SPACE +\\n            this.fontSize() +\\n            PX_SPACE +\\n            this.fontFamily());\\n    };\\n    Text.prototype._addTextLine = function (line) {\\n        if (this.align() === JUSTIFY) {\\n            line = line.trim();\\n        }\\n        var width = this._getTextWidth(line);\\n        return this.textArr.push({ text: line, width: width });\\n    };\\n    Text.prototype._getTextWidth = function (text) {\\n        var letterSpacing = this.letterSpacing();\\n        var length = text.length;\\n        return (getDummyContext().measureText(text).width +\\n            (length ? letterSpacing * (length - 1) : 0));\\n    };\\n    Text.prototype._setTextData = function () {\\n        var lines = this.text().split('\\\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis() && !shouldWrap;\\n        this.textArr = [];\\n        getDummyContext().font = this._getContextFont();\\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\\n        for (var i = 0, max = lines.length; i < max; ++i) {\\n            var line = lines[i];\\n            var lineWidth = this._getTextWidth(line);\\n            if (fixedWidth && lineWidth > maxWidth) {\\n                while (line.length > 0) {\\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\\n                    while (low < high) {\\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\\n                        if (substrWidth <= maxWidth) {\\n                            low = mid + 1;\\n                            match = substr + (shouldAddEllipsis ? ELLIPSIS : '');\\n                            matchWidth = substrWidth;\\n                        }\\n                        else {\\n                            high = mid;\\n                        }\\n                    }\\n                    if (match) {\\n                        if (wrapAtWord) {\\n                            var wrapIndex;\\n                            var nextChar = line[match.length];\\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\\n                                wrapIndex = match.length;\\n                            }\\n                            else {\\n                                wrapIndex =\\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\\n                                        1;\\n                            }\\n                            if (wrapIndex > 0) {\\n                                low = wrapIndex;\\n                                match = match.slice(0, low);\\n                                matchWidth = this._getTextWidth(match);\\n                            }\\n                        }\\n                        match = match.trimRight();\\n                        this._addTextLine(match);\\n                        textWidth = Math.max(textWidth, matchWidth);\\n                        currentHeightPx += lineHeightPx;\\n                        if (!shouldWrap ||\\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\\n                            break;\\n                        }\\n                        line = line.slice(low);\\n                        line = line.trimLeft();\\n                        if (line.length > 0) {\\n                            lineWidth = this._getTextWidth(line);\\n                            if (lineWidth <= maxWidth) {\\n                                this._addTextLine(line);\\n                                currentHeightPx += lineHeightPx;\\n                                textWidth = Math.max(textWidth, lineWidth);\\n                                break;\\n                            }\\n                        }\\n                    }\\n                    else {\\n                        break;\\n                    }\\n                }\\n            }\\n            else {\\n                this._addTextLine(line);\\n                currentHeightPx += lineHeightPx;\\n                textWidth = Math.max(textWidth, lineWidth);\\n            }\\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\\n                break;\\n            }\\n        }\\n        this.textHeight = fontSize;\\n        this.textWidth = textWidth;\\n    };\\n    Text.prototype.getStrokeScaleEnabled = function () {\\n        return true;\\n    };\\n    return Text;\\n}(Shape_1.Shape));\\nexports.Text = Text;\\nText.prototype._fillFunc = _fillFunc;\\nText.prototype._strokeFunc = _strokeFunc;\\nText.prototype.className = TEXT_UPPER;\\nText.prototype._attrsAffectingSize = [\\n    'text',\\n    'fontSize',\\n    'padding',\\n    'wrap',\\n    'lineHeight'\\n];\\nGlobal_2._registerNode(Text);\\nFactory_1.Factory.overWriteSetter(Text, 'width', Validators_1.getNumberOrAutoValidator());\\nFactory_1.Factory.overWriteSetter(Text, 'height', Validators_1.getNumberOrAutoValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, Validators_1.getNumberValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, Validators_1.getNumberValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, Validators_1.getNumberValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false);\\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, Validators_1.getNumberValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'text', '', Validators_1.getStringValidator());\\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\\nUtil_1.Collection.mapMethods(Text);\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getDummyContext\",\"dummyContext\",\"Util_1\",\"Util\",\"createCanvasElement\",\"getContext\",\"CONTEXT_2D\",\"checkDefaultFill\",\"config\",\"fillLinearGradientColorStops\",\"fillRadialGradientColorStops\",\"fillPatternImage\",\"fill\",\"__extends\",\"extendStatics\",\"d\",\"b\",\"Object\",\"setPrototypeOf\",\"__proto__\",\"Array\",\"p\",\"hasOwnProperty\",\"__\",\"constructor\",\"prototype\",\"create\",\"defineProperty\",\"value\",\"Factory_1\",\"Shape_1\",\"Global_1\",\"Validators_1\",\"Global_2\",\"ATTR_CHANGE_LIST\",\"attrChangeListLen\",\"length\",\"Text\",\"_super\",\"_this\",\"call\",\"_partialTextX\",\"n\",\"_partialTextY\",\"on\",\"CHANGE_KONVA\",\"_setTextData\",\"_sceneFunc\",\"Text.prototype._sceneFunc\",\"context\",\"padding\",\"fontSize\",\"lineHeightPx\",\"lineHeight\",\"textArr\",\"textArrLen\",\"verticalAlign\",\"alignY\",\"align\",\"totalWidth\",\"getWidth\",\"letterSpacing\",\"textDecoration\",\"shouldUnderline\",\"indexOf\",\"shouldLineThrough\",\"translateY\",\"setAttr\",\"_getContextFont\",\"MIDDLE\",\"LEFT\",\"getHeight\",\"BOTTOM\",\"translate\",\"lineTranslateX\",\"obj\",\"text\",\"width\",\"lastLine\",\"save\",\"RIGHT\",\"CENTER\",\"beginPath\",\"moveTo\",\"lineTranslateY\",\"Math\",\"round\",\"spacesNumber\",\"split\",\"oneWord\",\"lineWidth\",\"JUSTIFY\",\"lineTo\",\"strokeStyle\",\"stroke\",\"restore\",\"li\",\"letter\",\"floor\",\"_partialText\",\"fillStrokeShape\",\"measureSize\",\"_hitFunc\",\"Text.prototype._hitFunc\",\"height\",\"rect\",\"closePath\",\"setText\",\"Text.prototype.setText\",\"str\",\"_isString\",\"toString\",\"_setAttr\",\"TEXT\",\"Text.prototype.getWidth\",\"AUTO\",\"attrs\",\"undefined\",\"getTextWidth\",\"Text.prototype.getHeight\",\"Text.prototype.getTextWidth\",\"textWidth\",\"getTextHeight\",\"Text.prototype.getTextHeight\",\"warn\",\"textHeight\",\"Text.prototype.measureSize\",\"_context\",\"font\",\"metrics\",\"measureText\",\"Text.prototype._getContextFont\",\"Konva\",\"UA\",\"isIE\",\"fontStyle\",\"SPACE\",\"PX_SPACE\",\"fontFamily\",\"fontVariant\",\"_addTextLine\",\"Text.prototype._addTextLine\",\"line\",\"trim\",\"_getTextWidth\",\"push\",\"Text.prototype._getTextWidth\",\"Text.prototype._setTextData\",\"lines\",\"fixedWidth\",\"fixedHeight\",\"maxWidth\",\"maxHeightPx\",\"currentHeightPx\",\"wrap\",\"shouldWrap\",\"NONE\",\"wrapAtWord\",\"CHAR\",\"shouldAddEllipsis\",\"ellipsis\",\"additionalWidth\",\"ELLIPSIS\",\"i\",\"max\",\"low\",\"high\",\"match\",\"matchWidth\",\"mid\",\"substr\",\"slice\",\"substrWidth\",\"nextChar\",\"wrapIndex\",\"DASH\",\"lastIndexOf\",\"trimRight\",\"trimLeft\",\"getStrokeScaleEnabled\",\"Text.prototype.getStrokeScaleEnabled\",\"Shape\",\"_fillFunc\",\"fillText\",\"_strokeFunc\",\"strokeText\",\"className\",\"TEXT_UPPER\",\"_attrsAffectingSize\",\"_registerNode\",\"Factory\",\"overWriteSetter\",\"getNumberOrAutoValidator\",\"addGetterSetter\",\"getNumberValidator\",\"NORMAL\",\"TOP\",\"WORD\",\"getStringValidator\",\"Collection\",\"mapMethods\"]\n}\n"]