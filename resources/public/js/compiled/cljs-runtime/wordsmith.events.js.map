{"version":3,"sources":["wordsmith/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__60829__auto__","result__60830__auto__","debux.common.util/send-trace!","e","e60921","_","wordsmith.db/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__60922","p__60923","map__60924","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__60925","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","word","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__60933","map__60934","clojure.string/blank?","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.rand.cljs$core$IFn$_invoke$arity$1","p__60940","map__60941","clojure.string/trim","p__60947","map__60948","cljs.core/assoc-in","js/window","wordsmith.events/velocity","m","k","v","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/+","p__60950","map__60951","wordsmith.events/gravity","g","p__60953","p__60954","map__60955","map__60956","wordsmith.events/friction","window","wk","x","y","vx","vy","G__60959","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/*","p__60960","p__60961","map__60962","map__60963","wordsmith.events/border","cr","map__60970","width","height","G__60976","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__60981","map__60982","words","cljs.core/reduce-kv","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns wordsmith.events\n  (:require\n   [re-frame.core :as rf]\n   [wordsmith.db :as db]\n   [day8.re-frame.tracing :refer-macros [fn-traced defn-traced]]\n   [clojure.string :as s]))\n\n(rf/reg-event-db\n ::initialize-db\n (fn-traced [_ _]\n            db/default-db))\n\n(rf/reg-event-fx\n ::set-word\n (fn [{:keys [db]} [_ word]]\n   {:db (-> db\n            (assoc :word word)\n            (assoc :error? false))}))\n\n(rf/reg-event-fx\n ::try-word\n (fn [{:keys [db]}]\n   (if (and (nil? (get (:words db) (:word db)))\n            (not (s/blank? (:word db))))\n     {:dispatch [::add-word]}\n     {:db (-> db\n              (update-in [:words] assoc (:word db)\n                         (merge (get (:words db) (:word db))\n                                {:vx (- (rand 10) 5)\n                                 :vy (rand -10)}))\n              (assoc :error? true))})))\n\n(rf/reg-event-fx\n ::add-word\n (fn [{:keys [db]}]\n   ;; TODO add to local storage\n   ;;\n   (let [word (s/trim (:word db))]\n     {:db (-> db\n              (update-in [:words] assoc word\n                         {;; :x (rand-int (-> db :window :width))\n                          :x 65\n                          :y 120\n                          ;; :vx (- (rand 5) 2.5)\n                          :vx (rand 4)\n                          :vy (rand -1)})\n              (assoc :word \"\"))})))\n\n(rf/reg-event-fx\n ::window-resized\n (fn [{:keys [db]}]\n   {:db (-> db\n            (assoc-in [:window :width] (.-innerWidth js/window))\n            (assoc-in [:window :height] (.-innerHeight js/window)))}))\n\n(defn velocity\n  [m k v]\n  (assoc m k (-> v\n                 (update :x + (:vx v))\n                 (update :y + (:vy v)))))\n\n(defn gravity\n  [{:keys [g]} m k v]\n  (assoc m k (update v :vy + g)))\n\n(defn friction\n  [{:keys [window k]} m wk {:keys [x y vx vy] :as v}]\n  (assoc m wk (cond-> v\n                (or (= y 0)\n                    (= y (:height window))) (update :vx * k)\n                (or (= x 0)\n                    (= x (:width window))) (update :vy * k))))\n\n(defn border\n  [{:keys [window cr]} m k {:keys [x y vx vy] :as v}]\n  (let [{:keys [width height]} window]\n    (assoc m k (cond-> v\n                 (> x width) (assoc :vx (* vx -1 cr)\n                                    :x width)\n                 (> y height) (assoc :vy (* vy -1 cr)\n                                     :y height)\n                 (< x 0) (assoc :vx (* vx -1 cr)\n                                :x 0)\n                 (< y 0) (assoc :vy (* vy -1 cr)\n                                :y 0)))))\n\n(rf/reg-event-fx\n ::anim-step\n (fn [{:keys [db]}]\n   (let [words (:words db)]\n     {:db (assoc db\n                 :words ;; TODO transducer?\n                 (->> words\n                      (reduce-kv (partial gravity db) {})\n                      (reduce-kv (partial friction db) {})\n                      (reduce-kv velocity {})\n                      (reduce-kv (partial border db) {}))\n                 #_(reduce-kv (comp (partial gravity db)\n                                    velocity)\n                              {}\n                              words))})))\n"]}