{"version":3,"sources":["wordsmith/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","wordsmith.db/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__42541","p__42542","map__42543","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__42544","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","word","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","wordsmith.events/word-already-exists","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.rand.cljs$core$IFn$_invoke$arity$1","p__42548","map__42549","clojure.string/blank?","p__42551","map__42552","clojure.string/trim","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","p__42554","map__42555","cljs.core/assoc-in","js/window","p__42557","map__42558","wordsmith.events/velocity","vx","vy","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/+","p__42560","map__42561","wordsmith.events/gravity","g","p__42563","p__42564","map__42565","map__42566","wordsmith.events/friction","window","k","x","y","map__42569","width","height","G__42571","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/*","p__42572","p__42573","map__42574","map__42575","wordsmith.events/border","cr","map__42578","G__42580","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","wordsmith.events/fmap","f","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","iter__4523__auto__","s__42582","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__42584","cljs.core/chunk-buffer","i__42583","vec__42585","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42581","cljs.core/chunk-rest","vec__42588","cljs.core/first","cljs.core/cons","cljs.core/rest","v","p1__42591#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-first"],"sourcesContent":["(ns wordsmith.events\n  (:require\n   [re-frame.core :as rf]\n   [wordsmith.db :as db]\n   ;; [day8.re-frame.tracing :refer-macros [fn-traced defn-traced]]\n   [clojure.string :as s]))\n\n(rf/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(rf/reg-event-fx\n ::set-word\n (fn [{:keys [db]} [_ word]]\n   {:db (-> db\n            (assoc :word word)\n            (assoc :error? false))}))\n\n(defn- word-already-exists\n  [db]\n  (-> db ; make it jump\n      (update-in [:words (:word db)] merge {:vx (- (rand 10) 5)\n                                            :vy (rand -10)})\n      (assoc :error? true)))\n\n(rf/reg-event-fx\n ::try-word\n (fn [{:keys [db]}]\n   (if (and (nil? (get (:words db) (:word db)))\n            (not (s/blank? (:word db))))\n     {:dispatch [::add-word]}\n     {:db (word-already-exists db)})))\n\n(rf/reg-event-fx\n ::add-word\n (fn [{:keys [db]}]\n   ;; TODO add to local storage\n   ;;\n   (let [word (s/trim (:word db))]\n     {:db (-> db\n              (update-in [:words] assoc word\n                         {:x 65\n                          :y 120\n                          :vx (rand 4)\n                          :vy (rand -1)})\n              (assoc :word \"\"))})))\n\n(rf/reg-event-fx\n ::window-resized\n (fn [{:keys [db]}]\n   {:db (-> db\n            (assoc-in [:window :width] (.-innerWidth js/window))\n            (assoc-in [:window :height] (.-innerHeight js/window)))}))\n\n(defn velocity\n  [{:keys [vx vy] :as word}]\n  (-> word\n      (update :x + vx)\n      (update :y + vy)))\n\n(defn gravity\n  [{:keys [g]} word]\n  (update word :vy + g))\n\n(defn friction\n  [{:keys [window k]} {:keys [x y] :as word}]\n  (let [{:keys [width height]} window]\n    (cond-> word\n      (or (= y 0) (= y height)) (update :vx * k)\n      (or (= x 0) (= x width))  (update :vy * k))))\n\n(defn border\n  [{:keys [window cr]} {:keys [x y vx vy] :as word}]\n  (let [{:keys [width height]} window]\n    (cond-> word\n      (> x width)  (assoc :vx (* vx -1 cr)\n                          :x width)\n      (> y height) (assoc :vy (* vy -1 cr)\n                          :y height)\n      (< x 0)      (assoc :vx (* vx -1 cr)\n                          :x 0)\n      (< y 0)      (assoc :vy (* vy -1 cr)\n                          :y 0))))\n\n(defn fmap\n  [f m]\n  (into (empty m) (for [[k v] m] [k (f v)])))\n\n(rf/reg-event-db\n ::anim-step\n (fn [db]\n   (update-in db [:words] #(->> %\n                                (fmap (partial gravity db))\n                                (fmap (partial friction db))\n                                (fmap velocity)\n                                (fmap (partial border db))))))\n"]}