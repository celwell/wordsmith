shadow$provide.module$node_modules$konva$lib$Factory=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var Util_1=require("module$node_modules$konva$lib$Util"),Validators_1=require("module$node_modules$konva$lib$Validators");exports.Factory={addGetterSetter:function(constructor,attr,def,validator,after){this.addGetter(constructor,attr,def);this.addSetter(constructor,attr,validator,after);this.addOverloadedGetterSetter(constructor,attr)},addGetter:function(constructor,
attr,def){var method="get"+Util_1.Util._capitalize(attr);constructor.prototype[method]=constructor.prototype[method]||function(){var val=this.attrs[attr];return void 0===val?def:val}},addSetter:function(constructor,attr,validator,after){var method="set"+Util_1.Util._capitalize(attr);constructor.prototype[method]||exports.Factory.overWriteSetter(constructor,attr,validator,after)},overWriteSetter:function(constructor,attr,validator,after){var method="set"+Util_1.Util._capitalize(attr);constructor.prototype[method]=
function(val){validator&&void 0!==val&&null!==val&&(val=validator.call(this,val,attr));this._setAttr(attr,val);after&&after.call(this);return this}},addComponentsGetterSetter:function(constructor,attr,components,validator,after){var len=components.length,capitalize=Util_1.Util._capitalize,getter="get"+capitalize(attr),setter="set"+capitalize(attr),n,component;constructor.prototype[getter]=function(){var ret={};for(n=0;n<len;n++)component=components[n],ret[component]=this.getAttr(attr+capitalize(component));
return ret};var basicValidator=Validators_1.getComponentValidator(components);constructor.prototype[setter]=function(val){var oldVal=this.attrs[attr],key;validator&&(val=validator.call(this,val));basicValidator&&basicValidator.call(this,val,attr);for(key in val)val.hasOwnProperty(key)&&this._setAttr(attr+capitalize(key),val[key]);this._fireChangeEvent(attr,oldVal,val);after&&after.call(this);return this};this.addOverloadedGetterSetter(constructor,attr)},addOverloadedGetterSetter:function(constructor,
attr){var capitalizedAttr=Util_1.Util._capitalize(attr),setter="set"+capitalizedAttr,getter="get"+capitalizedAttr;constructor.prototype[attr]=function(){return arguments.length?(this[setter](arguments[0]),this):this[getter]()}},addDeprecatedGetterSetter:function(constructor,attr,def,validator){Util_1.Util.error("Adding deprecated "+attr);var method="get"+Util_1.Util._capitalize(attr),message=attr+" property is deprecated and will be removed soon. Look at Konva change log for more information.";constructor.prototype[method]=
function(){Util_1.Util.error(message);var val=this.attrs[attr];return void 0===val?def:val};this.addSetter(constructor,attr,validator,function(){Util_1.Util.error(message)});this.addOverloadedGetterSetter(constructor,attr)},backCompat:function(constructor,methods){Util_1.Util.each(methods,function(oldMethodName,newMethodName){function deprecated(){method.apply(this,arguments);Util_1.Util.error('"'+oldMethodName+'" method is deprecated and will be removed soon. Use ""'+newMethodName+'" instead.')}
var method=constructor.prototype[newMethodName],oldGetter="get"+Util_1.Util._capitalize(oldMethodName),oldSetter="set"+Util_1.Util._capitalize(oldMethodName);constructor.prototype[oldMethodName]=deprecated;constructor.prototype[oldGetter]=deprecated;constructor.prototype[oldSetter]=deprecated})},afterSetFilter:function(){this._filterUpToDate=!1}}}
//# sourceMappingURL=module$node_modules$konva$lib$Factory.js.map
