{"version":3,"sources":["wordsmith/views.cljs"],"mappings":"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","names":["wordsmith.views/canvas*","words","G__42592","re-frame.core/subscribe","window","G__42593","js/module$node_modules$react_konva$lib$ReactKonva.Stage","cljs.core/deref","js/module$node_modules$react_konva$lib$ReactKonva.Layer","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__42595","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__42597","cljs.core/chunk-buffer","i__42596","vec__42598","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__42601","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42594","cljs.core/chunk-rest","vec__42603","cljs.core/first","map__42606","cljs.core/cons","cljs.core/rest","word","x","y","vx","vy","js/module$node_modules$react_konva$lib$ReactKonva.Text","wordsmith.views/anim-loop","G__42608","re-frame.core/dispatch","js/requestAnimationFrame","wordsmith.views/canvas","cljs.core/with-meta","_this","wordsmith.views/main-panel","G__42609","error?","G__42610","e","G__42611","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__42612","cljs.core/chunk-first"],"sourcesContent":["(ns wordsmith.views\n  (:require [re-frame.core :as rf]\n            [wordsmith.subs :as subs]\n            [wordsmith.events :as events]\n            [\"react-konva\" :as rk]))\n\n(defn canvas* []\n  (let [words (rf/subscribe [::subs/words])\n        window (rf/subscribe [::subs/window])]\n    (fn []\n      [:> rk/Stage {:class \"stage\"\n                    :width (:width @window)\n                    :height (:height @window)}\n       [:> rk/Layer\n        (doall\n         (for [[word {:keys [x y vx vy]}] @words]\n           ^{:key word}\n           [:> rk/Text {:text word\n                        ;; :x (- x (* (count word) 7))\n                        ;; :y (- y 12)\n                        :x x\n                        :y (- y 28)\n                        :fontFamily \"courier new\"\n                        :fontSize 28}]))]])))\n\n(defn anim-loop\n  []\n  (rf/dispatch [::events/anim-step])\n  (js/requestAnimationFrame anim-loop))\n\n(def canvas\n  (with-meta canvas*\n    {:component-did-mount\n     (fn [_this]\n       (js/requestAnimationFrame anim-loop))}))\n\n(defn main-panel []\n  (let [word (rf/subscribe [::subs/word])\n        error? (rf/subscribe [::subs/error?])]\n    (fn []\n      [:div\n       [canvas]\n       [:h1 \"How many words can you think of?\"]\n       [:input {:class (when @error? \"error\")\n                :value @word\n                :auto-focus true\n                :spellcheck false\n                :on-change (fn [e]\n                             (rf/dispatch [::events/set-word\n                                           (-> e .-target .-value)]))\n                :on-key-down (fn [e]\n                               (when (or (= (.-key e) \"Enter\")\n                                         (= (.-key e) \" \"))\n                                 (.preventDefault e)\n                                 (rf/dispatch [::events/try-word])))}]])))\n"]}