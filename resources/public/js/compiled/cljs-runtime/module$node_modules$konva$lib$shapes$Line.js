shadow$provide.module$node_modules$konva$lib$shapes$Line=function(global,require,module,exports){var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=null===b?Object.create(b):
(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:!0});var Util_1=require("module$node_modules$konva$lib$Util");global=require("module$node_modules$konva$lib$Factory");var Shape_1=require("module$node_modules$konva$lib$Shape");module=require("module$node_modules$konva$lib$Validators");require=require("module$node_modules$konva$lib$Global");Shape_1=function(_super){function Line(config){config=_super.call(this,config)||this;config.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",
function(){this._clearCache("tensionPoints")});return config}__extends(Line,_super);Line.prototype._sceneFunc=function(context){var points=this.points(),length=points.length,tension=this.tension(),closed=this.closed(),bezier=this.bezier();if(length){context.beginPath();context.moveTo(points[0],points[1]);if(0!==tension&&4<length){tension=this.getTensionPoints();bezier=tension.length;var n=closed?0:4;for(closed||context.quadraticCurveTo(tension[0],tension[1],tension[2],tension[3]);n<bezier-2;)context.bezierCurveTo(tension[n++],
tension[n++],tension[n++],tension[n++],tension[n++],tension[n++]);closed||context.quadraticCurveTo(tension[bezier-2],tension[bezier-1],points[length-2],points[length-1])}else if(bezier)for(n=2;n<length;)context.bezierCurveTo(points[n++],points[n++],points[n++],points[n++],points[n++],points[n++]);else for(n=2;n<length;n+=2)context.lineTo(points[n],points[n+1]);closed?(context.closePath(),context.fillStrokeShape(this)):context.strokeShape(this)}};Line.prototype.getTensionPoints=function(){return this._getCache("tensionPoints",
this._getTensionPoints)};Line.prototype._getTensionPoints=function(){return this.closed()?this._getTensionPointsClosed():Util_1.Util._expandPoints(this.points(),this.tension())};Line.prototype._getTensionPointsClosed=function(){var p=this.points(),len=p.length,tension=this.tension(),firstControlPoints=Util_1.Util._getControlPoints(p[len-2],p[len-1],p[0],p[1],p[2],p[3],tension),lastControlPoints=Util_1.Util._getControlPoints(p[len-4],p[len-3],p[len-2],p[len-1],p[0],p[1],tension);tension=Util_1.Util._expandPoints(p,
tension);return[firstControlPoints[2],firstControlPoints[3]].concat(tension).concat([lastControlPoints[0],lastControlPoints[1],p[len-2],p[len-1],lastControlPoints[2],lastControlPoints[3],firstControlPoints[0],firstControlPoints[1],p[0],p[1]])};Line.prototype.getWidth=function(){return this.getSelfRect().width};Line.prototype.getHeight=function(){return this.getSelfRect().height};Line.prototype.getSelfRect=function(){var points=0!==this.tension()?this._getTensionPoints():this.points();for(var minX=
points[0],maxX=points[0],minY=points[1],maxY=points[1],x,y,i=0;i<points.length/2;i++)x=points[2*i],y=points[2*i+1],minX=Math.min(minX,x),maxX=Math.max(maxX,x),minY=Math.min(minY,y),maxY=Math.max(maxY,y);return{x:Math.round(minX),y:Math.round(minY),width:Math.round(maxX-minX),height:Math.round(maxY-minY)}};return Line}(Shape_1.Shape);exports.Line=Shape_1;Shape_1.prototype.className="Line";Shape_1.prototype._attrsAffectingSize=["points","bezier","tension"];require._registerNode(Shape_1);global.Factory.addGetterSetter(Shape_1,
"closed",!1);global.Factory.addGetterSetter(Shape_1,"bezier",!1);global.Factory.addGetterSetter(Shape_1,"tension",0,module.getNumberValidator());global.Factory.addGetterSetter(Shape_1,"points",[],module.getNumberArrayValidator());Util_1.Collection.mapMethods(Shape_1)}
//# sourceMappingURL=module$node_modules$konva$lib$shapes$Line.js.map
